<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RPC框架总结笔记</title>
    <link href="/2025/06/22/%E7%AE%80%E6%98%93RPC%E6%A1%86%E6%9E%B6/"/>
    <url>/2025/06/22/%E7%AE%80%E6%98%93RPC%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="RPC框架-简易版-总结笔记"><a href="#RPC框架-简易版-总结笔记" class="headerlink" title="RPC框架(简易版)总结笔记"></a>RPC框架(简易版)总结笔记</h2><p><img src="https://pic.code-nav.cn/course_picture/1608440217629360130/1gXguxVkdiQscA74.webp" alt="img"></p><p><strong>核心架构：消费方调用、序列化器、网络服务器、请求处理器、服务注册器。</strong></p><h3 id="消费方调用"><a href="#消费方调用" class="headerlink" title="消费方调用"></a>消费方调用</h3><p>（基于 JDK 动态代理+工厂模式实现，为指定服务接口类生成可发送HTTP请求的代理对象）</p><p><strong>实际调用过程</strong>：<code>UserService userService = ServiceProxyFactory.getProxy(UserService.class);</code></p><p><strong>实现原理</strong>：<code>ServiceProxyFactory</code>通过<code>Proxy.newProxyInstance()</code>方法创建代理对象，动态代理对象 <code>ServiceProxy</code> 实现<code>InvocationHandler</code>接口的<code>invoke</code>方法后，在调用代理对象实现方法时，会先进入<code>invoke</code>方法再进入目标方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务代理工厂（用于创建代理对象）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceProxyFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据服务类获取代理对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; serviceClass)</span> &#123;<br>        <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(<br>                serviceClass.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;serviceClass&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceProxy</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务代理（JDK 动态代理）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用代理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">// 指定序列化器</span><br>        <span class="hljs-type">Serializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkSerializer</span>();<br><br>        <span class="hljs-comment">// 构造请求</span><br>        <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">rpcRequest</span> <span class="hljs-operator">=</span> RpcRequest.builder()<br>                .serviceName(method.getDeclaringClass().getName())<br>                .methodName(method.getName())<br>                .parameterTypes(method.getParameterTypes())<br>                .args(args)<br>                .build();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 序列化</span><br>            <span class="hljs-type">byte</span>[] bodyBytes = serializer.serialize(rpcRequest);<br>            <span class="hljs-comment">// 发送请求</span><br>            <span class="hljs-comment">// todo 注意，这里地址被硬编码了（需要使用注册中心和服务发现机制解决）</span><br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">HttpResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> HttpRequest.post(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>)<br>                    .body(bodyBytes)<br>                    .execute()) &#123;<br>                <span class="hljs-type">byte</span>[] result = httpResponse.bodyBytes();<br>                <span class="hljs-comment">// 反序列化</span><br>                <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">rpcResponse</span> <span class="hljs-operator">=</span> serializer.deserialize(result, RpcResponse.class);<br>                <span class="hljs-keyword">return</span> rpcResponse.getData();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务注册器"><a href="#服务注册器" class="headerlink" title="服务注册器"></a>服务注册器</h3><p>(简单来讲，新建一个<code>final</code>的<code>ConcurrentHashMap</code>存储服务名称 和 对应的服务实现类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 本地注册中心</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalRegistry</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册信息存储</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册服务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> implClass</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String serviceName, Class&lt;?&gt; implClass)</span> &#123;<br>        map.put(serviceName, implClass);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取服务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; get(String serviceName) &#123;<br>        <span class="hljs-keyword">return</span> map.get(serviceName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除服务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceName</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(String serviceName)</span> &#123;<br>        map.remove(serviceName);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="请求处理器"><a href="#请求处理器" class="headerlink" title="请求处理器"></a>请求处理器</h3><p>（通过<code>server.requestHandler()</code>传入对应的处理类，处理类<code>HttpServerHandler</code>实现<code>Vertx</code>的<code>Handler</code>接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HTTP请求处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpServerHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Handler</span>&lt;HttpServerRequest&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServerRequest request)</span> &#123;<br>        <span class="hljs-comment">// 指定序列化器</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Serializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdkSerializer</span>();<br><br>        <span class="hljs-comment">// 记录日志</span><br>        System.out.println(<span class="hljs-string">&quot;receive request: &quot;</span> + request.method() + <span class="hljs-string">&quot; &quot;</span> + request.uri());<br><br>        <span class="hljs-comment">// 异步处理HTTP请求</span><br>        request.bodyHandler(body -&gt; &#123;<br>            <span class="hljs-comment">// 获取请求体的字节流</span><br>            <span class="hljs-type">byte</span>[] bytes = body.getBytes();<br>            <span class="hljs-type">RpcRequest</span> <span class="hljs-variable">rpcRequest</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 尝试反序列化请求为对象</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                rpcRequest = serializer.deserialize(bytes, RpcRequest.class);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">// 构造响应结果对象</span><br>            <span class="hljs-type">RpcResponse</span> <span class="hljs-variable">rpcResponse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcResponse</span>();<br>            <span class="hljs-comment">// 如果请求为null，直接返回</span><br>            <span class="hljs-keyword">if</span> (rpcRequest == <span class="hljs-literal">null</span>) &#123;<br>                rpcResponse.setMessage(<span class="hljs-string">&quot;rpcRequest is null&quot;</span>);<br>                doResponse(request, rpcResponse, serializer);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 从 请求对象 中获取 服务名称 并从 本地注册器 中获取到对应的 服务实现类</span><br>                Class&lt;?&gt; implClass = LocalRegistry.get(rpcRequest.getServiceName());<br>                <span class="hljs-comment">// 通过反射机制调用方法getMethod() 并 传入所需method的 方法名称 和 参数类型 动态获取方法</span><br>                <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> implClass.getMethod(rpcRequest.getMethodName(), rpcRequest.getParameterTypes());<br>                <span class="hljs-comment">// invoke() 在实例对象上调用该方法，并传入参数，得到返回结果</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(implClass.newInstance(), rpcRequest.getArgs());<br>                <span class="hljs-comment">// 封装返回结果</span><br>                rpcResponse.setData(result);<br>                rpcResponse.setDataType(method.getReturnType());<br>                rpcResponse.setMessage(<span class="hljs-string">&quot;ok&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                rpcResponse.setMessage(e.getMessage());<br>                rpcResponse.setException(e);<br>            &#125;<br>            <span class="hljs-comment">// 响应</span><br>            doResponse(request, rpcResponse, serializer);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对HTTP请求作Response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rpcResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serializer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doResponse</span><span class="hljs-params">(HttpServerRequest request, RpcResponse rpcResponse, Serializer serializer)</span> &#123;<br>        <span class="hljs-comment">// 初始化HttpServerResponse，并设置请求头指定内容类型为JSON</span><br>        <span class="hljs-type">HttpServerResponse</span> <span class="hljs-variable">httpServerResponse</span> <span class="hljs-operator">=</span> request.response()<br>                .putHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 通过序列化器将RpcResponse类序列化</span><br>            <span class="hljs-type">byte</span>[] serialized = serializer.serialize(rpcResponse);<br>            <span class="hljs-comment">// Vertx提供的方法，将字节数组包装成Vertx的Buffer对象</span><br>            <span class="hljs-comment">// 最后通过end函数结束HTTP响应，往函数传入Buffer后，客户端就能收到序列化后的响应内容</span><br>            httpServerResponse.end(Buffer.buffer(serialized));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            httpServerResponse.end(Buffer.buffer());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>RPC</tag>
      
      <tag>Vertx</tag>
      
      <tag>Proxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBootWeb案例</title>
    <link href="/2024/10/16/SpringBootWeb%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/10/16/SpringBootWeb%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBootWeb案例"><a href="#SpringBootWeb案例" class="headerlink" title="SpringBootWeb案例"></a>SpringBootWeb案例</h1><p>前面我们已经讲解了Web前端开发的基础知识，也讲解了Web后端开发的基础(HTTP协议、请求响应)，并且也讲解了数据库MySQL，以及通过Mybatis框架如何来完成数据库的基本操作。 那接下来，我们就通过一个案例，来将前端开发、后端开发、数据库整合起来。 而这个案例呢，就是我们前面提到的Tlias智能学习辅助系统。</p><p><img src="/assets/image-20220904104826854.png"></p><p>在这个案例中，前端开发人员已经将前端工程开发完毕了。 我们需要做的，就是参考接口文档完成后端功能的开发，然后结合前端工程进行联调测试即可。</p><p><strong>完成后的成品效果展示：</strong></p><p><img src="/assets/image-20220904103734643.png" alt="image-20220904103734643"></p><blockquote><p><strong>今天的主要内容如下：</strong></p><ul><li>准备工作</li><li>部门管理</li><li>员工管理</li></ul></blockquote><p>下面我们就进入到今天的第1个内容<code>准备工作</code>的学习。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>准备工作的学习，我们先从”需求”和”环境搭建”开始入手。</p><h3 id="1-1-需求-环境搭建"><a href="#1-1-需求-环境搭建" class="headerlink" title="1.1 需求&amp;环境搭建"></a>1.1 需求&amp;环境搭建</h3><h4 id="1-1-1-需求说明"><a href="#1-1-1-需求说明" class="headerlink" title="1.1.1 需求说明"></a>1.1.1 需求说明</h4><p><strong>1、部门管理</strong></p><p><img src="/assets/image-20221213205503102.png" alt="image-20221213205503102"></p><p>部门管理功能开发包括：</p><ul><li>查询部门列表</li><li>删除部门</li><li>新增部门</li><li>修改部门</li></ul><p><strong>2、员工管理</strong></p><p><img src="/assets/image-20221213205737307.png" alt="image-20221213205737307"></p><p>员工管理功能开发包括：</p><ul><li>查询员工列表(分页、条件)</li><li>删除员工</li><li>新增员工</li><li>修改员工</li></ul><h4 id="1-1-2-环境搭建"><a href="#1-1-2-环境搭建" class="headerlink" title="1.1.2 环境搭建"></a>1.1.2 环境搭建</h4><p><img src="/assets/image-20221213230710821.png" alt="image-20221213230710821"></p><p>步骤：</p><ol><li>准备数据库表(dept、emp)</li><li>创建springboot工程，引入对应的起步依赖（web、mybatis、mysql驱动、lombok）</li><li>配置文件application.properties中引入mybatis的配置信息，准备对应的实体类</li><li>准备对应的Mapper、Service(接口、实现类)、Controller基础结构</li></ol><p>第1步：准备数据库表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 部门管理<br>create table dept(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br>-- 部门表测试数据<br>insert into dept (id, name, create_time, update_time) values(1,&#x27;学工部&#x27;,now(),now()),(2,&#x27;教研部&#x27;,now(),now()),(3,&#x27;咨询部&#x27;,now(),now()), (4,&#x27;就业部&#x27;,now(),now()),(5,&#x27;人事部&#x27;,now(),now());<br><br><br><br>-- 员工管理(带约束)<br>create table emp (<br>  id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>  username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>  password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>  name varchar(10) not null comment &#x27;姓名&#x27;,<br>  gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>  image varchar(300) comment &#x27;图像&#x27;,<br>  job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>  entrydate date comment &#x27;入职时间&#x27;,<br>  dept_id int unsigned comment &#x27;部门ID&#x27;,<br>  create_time datetime not null comment &#x27;创建时间&#x27;,<br>  update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br>-- 员工表测试数据<br>INSERT INTO emp<br>(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES<br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><p>第2步：创建一个SpringBoot工程，选择引入对应的起步依赖（web、mybatis、mysql驱动、lombok） (版本选择2.7.5版本，可以创建完毕之后，在pom.xml文件中更改版本号)</p><p><img src="/assets/image-20221213221142985.png" alt="image-20221213221142985"></p><p><img src="/assets/image-20221213221408420.png" alt="image-20221213221408420"></p><p> 生成的pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建项目工程目录结构：</p><p><img src="/assets/image-20221213222039985.png" alt="image-20221213222039985"></p><p>第3步：配置文件application.properties中引入mybatis的配置信息，准备对应的实体类</p><ul><li>application.properties （直接把之前项目中的复制过来）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#数据库连接</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">1234</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启mybatis的日志输出</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启数据库表字段 到 实体类属性的驼峰映射</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*部门类*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*员工类*/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Short job;<br>    <span class="hljs-keyword">private</span> LocalDate entrydate;<br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>第4步：准备对应的Mapper、Service(接口、实现类)、Controller基础结构</p><p>数据访问层：</p><ul><li>DeptMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>业务层：</p><ul><li>DeptService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-comment">//部门业务规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DeptServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">//部门业务实现类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-comment">//员工业务规则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpServiceImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">//员工业务实现类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>控制层：</p><ul><li>DeptController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">//部门管理控制器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>EmpController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">//员工管理控制器</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目工程结构：</p><p><img src="/assets/image-20221213224927868.png" alt="image-20221213224927868"></p><h3 id="1-2-开发规范"><a href="#1-2-开发规范" class="headerlink" title="1.2 开发规范"></a>1.2 开发规范</h3><p>了解完需求也完成了环境搭建了，我们下面开始学习开发的一些规范。</p><p>开发规范我们主要从以下几方面介绍：</p><p><strong>1、开发规范-REST</strong></p><p>我们的案例是基于当前最为主流的前后端分离模式进行开发。</p><p><img src="/assets/image-20221213230911102.png" alt="image-20221213230911102"></p><p>在前后端分离的开发模式中，前后端开发人员都需要根据提前定义好的接口文档，来进行前后端功能的开发。</p><blockquote><p>后端开发人员：必须严格遵守提供的接口文档进行后端功能开发（保障开发的功能可以和前端对接）</p><p><img src="/assets/image-20221213231519551.png" alt="image-20221213231519551"></p></blockquote><p>而在前后端进行交互的时候，我们需要基于当前主流的REST风格的API接口进行交互。</p><p>什么是REST风格呢?</p><ul><li>REST（Representational State Transfer），表述性状态转换，它是一种软件架构风格。</li></ul><p><strong>传统URL风格如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/user/getById?id=1     GET：查询id为1的用户<br>http://localhost:8080/user/saveUser         POST：新增用户<br>http://localhost:8080/user/updateUser       POST：修改用户<br>http://localhost:8080/user/deleteUser?id=1  GET：删除id为1的用户<br></code></pre></td></tr></table></figure><p>我们看到，原始的传统URL呢，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p><p><strong>基于REST风格URL如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/users/1  GET：查询<span class="hljs-built_in">id</span>为1的用户<br>http://localhost:8080/users    POST：新增用户<br>http://localhost:8080/users    PUT：修改用户<br>http://localhost:8080/users/1  DELETE：删除<span class="hljs-built_in">id</span>为1的用户<br></code></pre></td></tr></table></figure><p>其中总结起来，就一句话：通过URL定位要操作的资源，通过HTTP动词(请求方式)来描述具体的操作。</p><p>在REST风格的URL中，通过四种请求方式，来操作数据的增删改查。 </p><ul><li>GET ： 查询</li><li>POST ：新增</li><li>PUT ：修改</li><li>DELETE ：删除</li></ul><p>我们看到如果是基于REST风格，定义URL，URL将会更加简洁、更加规范、更加优雅。</p><blockquote><p>注意事项：</p><ul><li>REST是风格，是约定方式，约定不是规定，可以打破</li><li>描述模块的功能通常使用复数，也就是加s的格式来描述，表示此类资源，而非单个资源。如：users、emps、books…</li></ul></blockquote><p><strong>2、开发规范-统一响应结果</strong></p><p>前后端工程在进行交互时，使用统一响应结果 Result。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//响应码，1 代表成功; 0 代表失败</span><br>    <span class="hljs-keyword">private</span> String msg;  <span class="hljs-comment">//响应信息 描述字符串</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//返回的数据</span><br><br>    <span class="hljs-comment">//增删改 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">//查询 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,data);<br>    &#125;<br>    <span class="hljs-comment">//失败响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>,msg,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、开发流程</strong></p><p>我们在进行功能开发时，都是根据如下流程进行：</p><p><img src="/assets/image-20220904125004138.png" alt="image-20220904125004138"> </p><ol><li><p>查看页面原型明确需求</p><ul><li>根据页面原型和需求，进行表结构设计、编写接口文档(已提供)</li></ul></li><li><p>阅读接口文档</p></li><li><p>思路分析</p></li><li><p>功能接口开发</p><ul><li>就是开发后台的业务功能，一个业务功能，我们称为一个接口</li></ul></li><li><p>功能接口测试</p><ul><li>功能开发完毕后，先通过Postman进行功能接口测试，测试通过后，再和前端进行联调测试</li></ul></li><li><p>前后端联调测试</p><ul><li>和前端开发人员开发好的前端工程一起测试</li></ul></li></ol><h2 id="2-部门管理"><a href="#2-部门管理" class="headerlink" title="2. 部门管理"></a>2. 部门管理</h2><p>我们按照前面学习的开发流程，开始完成功能开发。首先按照之前分析的需求，完成<code>部门管理</code>的功能开发。</p><p>开发的部门管理功能包含：</p><ol><li>查询部门</li><li>删除部门</li><li>新增部门</li><li>更新部门（不讲解，自己独立完成）</li></ol><h3 id="2-1-查询部门"><a href="#2-1-查询部门" class="headerlink" title="2.1 查询部门"></a>2.1 查询部门</h3><h4 id="2-1-1-原型和需求"><a href="#2-1-1-原型和需求" class="headerlink" title="2.1.1 原型和需求"></a>2.1.1 原型和需求</h4><p><img src="/assets/image-20221213234154699.png" alt="image-20221213234154699"></p><blockquote><p>查询的部门的信息：部门ID、部门名称、修改时间</p><p>通过页面原型以及需求描述，我们可以看到，部门查询，是不需要考虑分页操作的。</p></blockquote><h4 id="2-1-2-接口文档"><a href="#2-1-2-接口文档" class="headerlink" title="2.1.2 接口文档"></a>2.1.2 接口文档</h4><p><strong>部门列表查询</strong></p><ul><li><p>基本信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">请求路径：/depts<br><br>请求方式：<span class="hljs-built_in">GET</span><br><br>接口描述：该接口用于部门列表数据查询<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>无</p></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object[ ]</td><td>非必须</td><td>返回的数据</td></tr><tr><td>|- id</td><td>number</td><td>非必须</td><td>id</td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td>部门名称</td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td>创建时间</td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td>修改时间</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;学工部&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;教研部&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:29&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-1-3-思路分析"><a href="#2-1-3-思路分析" class="headerlink" title="2.1.3 思路分析"></a>2.1.3 思路分析</h4><p><img src="/assets/image-20221213235157345.png" alt="image-20221213235157345"></p><h4 id="2-1-4-功能开发"><a href="#2-1-4-功能开发" class="headerlink" title="2.1.4 功能开发"></a>2.1.4 功能开发</h4><p>通过查看接口文档：部门列表查询</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：GET</p><p>请求参数：无</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/depts&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;查询所有部门数据&quot;</span>);<br>        List&lt;Dept&gt; deptList = deptService.list();<br>        <span class="hljs-keyword">return</span> Result.success(deptList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Slf4j注解源码：</p><p><img src="/assets/image-20221214000909044.png" alt="image-20221214000909044"></p></blockquote><p><strong>DeptService</strong>（业务接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有的部门数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>   存储Dept对象的集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>DeptServiceImpl</strong>（业务实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Dept&gt; deptList = deptMapper.list();<br>        <span class="hljs-keyword">return</span> deptList;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">//查询所有部门数据</span><br>    <span class="hljs-meta">@Select(&quot;select id, name, create_time, update_time from dept&quot;)</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-5-功能测试"><a href="#2-1-5-功能测试" class="headerlink" title="2.1.5 功能测试"></a>2.1.5 功能测试</h4><p>功能开发完成后，我们就可以启动项目，然后打开postman，发起GET请求，访问 ：<a href="http://localhost:8080/depts">http://localhost:8080/depts</a></p><p><img src="/assets/image-20220904130315247.png"></p><h3 id="2-2-前后端联调"><a href="#2-2-前后端联调" class="headerlink" title="2.2 前后端联调"></a>2.2 前后端联调</h3><p>完成了查询部门的功能，我们也通过postman工具测试通过了，下面我们再基于前后端分离的方式进行接口联调。具体操作如下：</p><p>1、将资料中提供的”前端环境”文件夹中的压缩包，拷贝到一个没有中文不带空格的目录下</p><p><img src="/assets/image-20221214100230484.png" alt="image-20221214100230484"> </p><p>2、拷贝到一个没有中文不带空格的目录后，进行解压（解压到当前目录）</p><p><img src="/assets/image-20221214100039074.png" alt="image-20221214100039074"> </p><p>3、启动nginx</p><p><img src="/assets/image-20221214100703404.png" alt="image-20221214100703404"> </p><p><img src="/assets/image-20221214101711107.png" alt="image-20221214101711107"></p><p>4、打开浏览器，访问：<a href="http://localhost:90/">http://localhost:90</a></p><p><img src="/assets/image-20221214100918557.png" alt="image-20221214100918557"></p><p>5、测试：部门管理 - 查询部门列表</p><p><img src="/assets/image-20221214101436198.png" alt="image-20221214101436198"></p><blockquote><p>说明：只要按照接口文档开发功能接口，就能保证前后端程序交互</p><ul><li>后端：严格遵守接口文档进行功能接口开发</li><li>前端：严格遵守接口文档访问功能接口</li></ul></blockquote><h3 id="2-3-删除部门"><a href="#2-3-删除部门" class="headerlink" title="2.3 删除部门"></a>2.3 删除部门</h3><p>查询部门的功能我们搞定了，下面我们开始完成<code>删除部门</code>的功能开发。</p><h4 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1 需求"></a>2.3.1 需求</h4><p><img src="/assets/image-20220904132440220.png"></p><p>点击部门列表后面操作栏的 “删除” 按钮，就可以删除该部门信息。 此时，前端只需要给服务端传递一个ID参数就可以了。 我们从接口文档中也可以看得出来。</p><h4 id="2-3-2-接口文档"><a href="#2-3-2-接口文档" class="headerlink" title="2.3.2 接口文档"></a>2.3.2 接口文档</h4><p><strong>删除部门</strong></p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/depts/&#123;<span class="hljs-built_in">id</span>&#125;<br><br>请求方式：DELETE<br><br>接口描述：该接口用于根据ID删除部门数据<br></code></pre></td></tr></table></figure></li><li><p>请求参数<br>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>number</td><td>必须</td><td>部门ID</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/depts/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据<br>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-3-思路分析"><a href="#2-3-3-思路分析" class="headerlink" title="2.3.3 思路分析"></a>2.3.3 思路分析</h4><p><img src="/assets/image-20221214102705490.png" alt="image-20221214102705490"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts&#x2F;{id}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@PathVariable</span><br></code></pre></td></tr></table></figure><p>问题2：如何限定请求方式是delete？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@DeleteMapping</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-3-4-功能开发"><a href="#2-3-4-功能开发" class="headerlink" title="2.3.4 功能开发"></a>2.3.4 功能开发</h4><p>通过查看接口文档：删除部门</p><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {id}</p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-meta">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-comment">//日志记录</span><br>        log.info(<span class="hljs-string">&quot;根据id删除部门&quot;</span>);<br>        <span class="hljs-comment">//调用service层功能</span><br>        deptService.delete(id);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id    部门id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-comment">//调用持久层删除功能</span><br>        deptMapper.deleteById(id);<br>    &#125;<br>    <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除部门信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id   部门id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br>   <br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-5-功能测试"><a href="#2-3-5-功能测试" class="headerlink" title="2.3.5 功能测试"></a>2.3.5 功能测试</h4><p>删除功能开发完成后，重新启动项目，使用postman，发起DELETE请求：</p><p><img src="/assets/image-20221214112451600.png" alt="image-20221214112451600"></p><h4 id="2-3-6-前后端联调"><a href="#2-3-6-前后端联调" class="headerlink" title="2.3.6 前后端联调"></a>2.3.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221214113708369.png" alt="image-20221214113708369"></p><p><img src="/assets/image-20221214113941657.png" alt="image-20221214113941657"></p><h3 id="2-4-新增部门"><a href="#2-4-新增部门" class="headerlink" title="2.4 新增部门"></a>2.4 新增部门</h3><p>我们前面已完成了<code>查询部门</code>、<code>删除部门</code>两个功能，也熟悉了开发的流程。下面我们继续完成<code>新增部门</code>功能。</p><h4 id="2-4-1-需求"><a href="#2-4-1-需求" class="headerlink" title="2.4.1 需求"></a>2.4.1 需求</h4><img src="assets/image-20220904150427982.png" style="zoom:80%;" /><p>点击 “新增部门” 按钮，弹出新增部门对话框，输入部门名称，点击 “保存” ，将部门信息保存到数据库。</p><h4 id="2-4-2-接口文档"><a href="#2-4-2-接口文档" class="headerlink" title="2.4.2 接口文档"></a>2.4.2 接口文档</h4><p><strong>添加部门</strong></p><ul><li><p>基本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">请求路径：/depts<br><br>请求方式：POST<br><br>接口描述：该接口用于添加部门数据<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>必须</td><td>部门名称</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;教研部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-4-3-思路分析"><a href="#2-4-3-思路分析" class="headerlink" title="2.4.3 思路分析"></a>2.4.3 思路分析</h4><p><img src="/assets/image-20221214115519648.png" alt="image-20221214115519648"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;depts</li><li>前端请求方式：POST</li><li>前端请求参数 (Json格式)：{ “name”: “教研部” }</li></ul><p>问题1：如何限定请求方式是POST？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br></code></pre></td></tr></table></figure><p>问题2：怎么在controller中接收json格式的请求参数？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestBody</span>  <span class="hljs-comment">//把前端传递的json数据填充到实体类中</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="2-4-4-功能开发"><a href="#2-4-4-功能开发" class="headerlink" title="2.4.4 功能开发"></a>2.4.4 功能开发</h4><p>通过查看接口文档：新增部门</p><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：POST</p><p>请求参数：json格式 </p><p>响应数据：json格式</p></blockquote><p><strong>DeptController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/depts&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span>&#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;新增部门：&#123;&#125;&quot;</span>,dept);<br>        <span class="hljs-comment">//调用service层添加功能</span><br>        deptService.add(dept);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DeptService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增部门</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dept  部门对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DeptServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-comment">//补全部门数据</span><br>        dept.setCreateTime(LocalDateTime.now());<br>        dept.setUpdateTime(LocalDateTime.now());<br>        <span class="hljs-comment">//调用持久层增加功能</span><br>        deptMapper.inser(dept);<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DeptMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into dept (name, create_time, update_time) values (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">inser</span><span class="hljs-params">(Dept dept)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-5-功能测试"><a href="#2-4-5-功能测试" class="headerlink" title="2.4.5 功能测试"></a>2.4.5 功能测试</h4><p>新增功能开发完成后，重新启动项目，使用postman，发起POST请求：</p><p><img src="/assets/image-20221214153758708.png" alt="image-20221214153758708"></p><h4 id="2-4-6-前后端联调"><a href="#2-4-6-前后端联调" class="headerlink" title="2.4.6 前后端联调"></a>2.4.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215105446189.png" alt="image-20221215105446189"></p><p><img src="/assets/image-20221214154645746.png" alt="image-20221214154645746"></p><h4 id="2-4-7-请求路径"><a href="#2-4-7-请求路径" class="headerlink" title="2.4.7 请求路径"></a>2.4.7 请求路径</h4><p>我们部门管理的<code>查询</code>、<code>删除</code>、<code>新增</code>功能全部完成了，接下来我们要对controller层的代码进行优化。</p><p>首先我们先来看下目前controller层代码：</p><p><img src="/assets/image-20221215110553435.png" alt="image-20221215110553435"></p><blockquote><p>以上三个方法上的请求路径，存在一个共同点：都是以<code>/depts</code>作为开头。（重复了）</p></blockquote><p>在Spring当中为了简化请求路径的定义，可以把公共的请求路径，直接抽取到类上，在类上加一个注解@RequestMapping，并指定请求路径”&#x2F;depts”。代码参照如下：</p><p><img src="/assets/image-20221215111110219.png" alt="image-20221215111110219"></p><blockquote><p>优化前后的对比：</p><p><img src="/assets/image-20221215111309042.png" alt="image-20221215111309042"></p></blockquote><blockquote><p>注意事项：一个完整的请求路径，应该是类上@RequestMapping的value属性 + 方法上的 @RequestMapping的value属性</p></blockquote><h2 id="3-员工管理"><a href="#3-员工管理" class="headerlink" title="3. 员工管理"></a>3. 员工管理</h2><p>完成了部门管理的功能开发之后，我们进入到下一环节员工管理功能的开发。</p><p><img src="/assets/image-20221215142107329.png" alt="image-20221215142107329"></p><p>基于以上原型，我们可以把员工管理功能分为：</p><ol><li>分页查询（今天完成）</li><li>带条件的分页查询（今天完成）</li><li>删除员工（今天完成）</li><li>新增员工（后续完成）</li><li>修改员工（后续完成）</li></ol><p>那下面我们就先从分页查询功能开始学习。</p><h3 id="3-1-分页查询"><a href="#3-1-分页查询" class="headerlink" title="3.1 分页查询"></a>3.1 分页查询</h3><h4 id="3-1-1-基础分页"><a href="#3-1-1-基础分页" class="headerlink" title="3.1.1 基础分页"></a>3.1.1 基础分页</h4><h5 id="3-1-1-1-需求分析"><a href="#3-1-1-1-需求分析" class="headerlink" title="3.1.1.1 需求分析"></a>3.1.1.1 需求分析</h5><p>我们之前做的查询功能，是将数据库中所有的数据查询出来并展示到页面上，试想如果数据库中的数据有很多(假设有十几万条)的时候，将数据全部展示出来肯定不现实，那如何解决这个问题呢？</p><blockquote><p>使用分页解决这个问题。每次只展示一页的数据，比如：一页展示10条数据，如果还想看其他的数据，可以通过点击页码进行查询。</p></blockquote><p><img src="/assets/image-20221215141233541.png" alt="image-20221215141233541"></p><p>要想从数据库中进行分页查询，我们要使用<code>LIMIT</code>关键字，格式为：limit  开始索引  每页显示的条数</p><blockquote><p>查询第1页数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>查询第2页数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>查询第3页的数据的SQL语句是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp  <span class="hljs-keyword">limit</span> <span class="hljs-number">20</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>观察以上SQL语句，发现： 开始索引一直在改变 ， 每页显示条数是固定的</p><p>开始索引的计算公式：   开始索引 &#x3D; (当前页码 - 1)  *  每页显示条数</p></blockquote><p>我们继续基于页面原型，继续分析，得出以下结论：</p><ol><li>前端在请求服务端时，传递的参数<ul><li>当前页码  page</li><li>每页显示条数  pageSize</li></ul></li><li>后端需要响应什么数据给前端<ul><li>所查询到的数据列表（存储到List 集合中）</li><li>总记录数</li></ul></li></ol><p><img src="/assets/image-20221215152021068.png" alt="image-20221215152021068"></p><blockquote><p>后台给前端返回的数据包含：List集合(数据列表)、total(总记录数)</p><p>而这两部分我们通常封装到PageBean对象中，并将该对象转换为json格式的数据响应回给浏览器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageBean</span> &#123;<br> <span class="hljs-keyword">private</span> Long total; <span class="hljs-comment">//总记录数</span><br> <span class="hljs-keyword">private</span> List rows; <span class="hljs-comment">//当前页数据列表</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h5 id="3-1-1-2-接口文档"><a href="#3-1-1-2-接口文档" class="headerlink" title="3.1.1.2 接口文档"></a>3.1.1.2 接口文档</h5><p><strong>员工列表查询</strong></p><ul><li><p>基本信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">请求路径：/emps<br><br>请求方式：<span class="hljs-built_in">GET</span><br><br>接口描述：该接口用于员工列表数据的条件分页查询<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：queryString</p><p>参数说明：</p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张</td><td>姓名</td></tr><tr><td>gender</td><td>否</td><td>1</td><td>性别 , 1 男 , 2 女</td></tr><tr><td>begin</td><td>否</td><td>2010-01-01</td><td>范围匹配的开始时间(入职日期)</td></tr><tr><td>end</td><td>否</td><td>2020-01-01</td><td>范围匹配的结束时间(入职日期)</td></tr><tr><td>page</td><td>是</td><td>1</td><td>分页查询的页码，如果未指定，默认为1</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>分页查询的每页记录数，如果未指定，默认为10</td></tr></tbody></table><p>请求数据样例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/emps?name=张&amp;gender=1&amp;begin=2007-09-01&amp;end=2022-09-01&amp;page=1&amp;pageSize=10<br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td>响应码, 1 成功 , 0 失败</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td>提示信息</td><td></td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td>返回的数据</td><td></td></tr><tr><td>|- total</td><td>number</td><td>必须</td><td></td><td>总记录数</td><td></td></tr><tr><td>|- rows</td><td>object []</td><td>必须</td><td></td><td>数据列表</td><td>item 类型: object</td></tr><tr><td>|- id</td><td>number</td><td>非必须</td><td></td><td>id</td><td></td></tr><tr><td>|- username</td><td>string</td><td>非必须</td><td></td><td>用户名</td><td></td></tr><tr><td>|- name</td><td>string</td><td>非必须</td><td></td><td>姓名</td><td></td></tr><tr><td>|- password</td><td>string</td><td>非必须</td><td></td><td>密码</td><td></td></tr><tr><td>|- entrydate</td><td>string</td><td>非必须</td><td></td><td>入职日期</td><td></td></tr><tr><td>|- gender</td><td>number</td><td>非必须</td><td></td><td>性别 , 1 男 ; 2 女</td><td></td></tr><tr><td>|- image</td><td>string</td><td>非必须</td><td></td><td>图像</td><td></td></tr><tr><td>|- job</td><td>number</td><td>非必须</td><td></td><td>职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师</td><td></td></tr><tr><td>|- deptId</td><td>number</td><td>非必须</td><td></td><td>部门id</td><td></td></tr><tr><td>|- createTime</td><td>string</td><td>非必须</td><td></td><td>创建时间</td><td></td></tr><tr><td>|- updateTime</td><td>string</td><td>非必须</td><td></td><td>更新时间</td><td></td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>       <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;金庸&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-53B.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-01-01&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:30&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-02T00:29:04&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhangwuji&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张无忌&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-02-00-27-53B.jpg&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2015-01-01&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-01T23:06:30&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-02T00:29:04&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="3-1-1-3-思路分析"><a href="#3-1-1-3-思路分析" class="headerlink" title="3.1.1.3 思路分析"></a>3.1.1.3 思路分析</h5><p><img src="/assets/image-20221215153413290.png" alt="image-20221215153413290"></p><p>分页查询需要的数据，封装在PageBean对象中：</p><p><img src="/assets/image-20221215154036047.png" alt="image-20221215154036047"></p><h5 id="3-1-1-4-功能开发"><a href="#3-1-1-4-功能开发" class="headerlink" title="3.1.1.4 功能开发"></a>3.1.1.4 功能开发</h5><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：跟随在请求路径后的参数字符串。  例：&#x2F;emps?page&#x3D;1&amp;pageSize&#x3D;10</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.pojo.PageBean;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@RequestParam(defaultValue&#x3D;”默认值”)   &#x2F;&#x2F;设置请求参数默认值</p></blockquote><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页展示记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Emp;<br><span class="hljs-keyword">import</span> com.itheima.pojo.PageBean;<br><span class="hljs-keyword">import</span> com.itheima.service.EmpService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<br>        <span class="hljs-comment">//1、获取总记录数</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> empMapper.count();<br><br>        <span class="hljs-comment">//2、获取分页查询结果列表</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (page - <span class="hljs-number">1</span>) * pageSize; <span class="hljs-comment">//计算起始索引 , 公式: (页码-1)*页大小</span><br>        List&lt;Emp&gt; empList = empMapper.list(start, pageSize);<br><br>        <span class="hljs-comment">//3、封装PageBean对象</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(count , empList);<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取总记录数</span><br>    <span class="hljs-meta">@Select(&quot;select count(*) from emp&quot;)</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp limit #&#123;start&#125;, #&#123;pageSize&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer start, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-1-5-功能测试"><a href="#3-1-1-5-功能测试" class="headerlink" title="3.1.1.5 功能测试"></a>3.1.1.5 功能测试</h5><p>功能开发完成后，重新启动项目，使用postman，发起POST请求：</p><p><img src="/assets/image-20221215162008339.png" alt="image-20221215162008339"></p><h5 id="3-1-1-6-前后端联调"><a href="#3-1-1-6-前后端联调" class="headerlink" title="3.1.1.6 前后端联调"></a>3.1.1.6 前后端联调</h5><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215183413504.png" alt="image-20221215183413504"></p><h4 id="3-1-2-分页插件"><a href="#3-1-2-分页插件" class="headerlink" title="3.1.2 分页插件"></a>3.1.2 分页插件</h4><h5 id="3-1-2-1-介绍"><a href="#3-1-2-1-介绍" class="headerlink" title="3.1.2.1 介绍"></a>3.1.2.1 介绍</h5><p>前面我们已经完了基础的分页查询，大家会发现：分页查询功能编写起来比较繁琐。</p><p><img src="/assets/image-20221215164811566.png" alt="image-20221215164811566"></p><blockquote><p>在Mapper接口中定义两个方法执行两条不同的SQL语句：</p><ol><li>查询总记录数</li><li>指定页码的数据列表</li></ol><p>在Service当中，调用Mapper接口的两个方法，分别获取：总记录数、查询结果列表，然后在将获取的数据结果封装到PageBean对象中。</p><p>大家思考下：在未来开发其他项目，只要涉及到分页查询功能(例：订单、用户、支付、商品)，都必须按照以上操作完成功能开发</p></blockquote><p>结论：原始方式的分页查询，存在着”步骤固定”、”代码频繁”的问题</p><p>解决方案：可以使用一些现成的分页插件完成。对于Mybatis来讲现在最主流的就是PageHelper。</p><blockquote><p>PageHelper是Mybatis的一款功能强大、方便易用的分页插件，支持任何形式的单标、多表的分页查询。</p><p>官网：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p></blockquote><p><img src="/assets/image-20221215170038833.png" alt="image-20221215170038833"></p><blockquote><p>在执行empMapper.list()方法时，就是执行：select  *  from  emp   语句，怎么能够实现分页操作呢？</p><p>分页插件帮我们完成了以下操作：</p><ol><li>先获取到要执行的SQL语句：select  *  from  emp      </li><li>把SQL语句中的字段列表，变为：count(*)</li><li>执行SQL语句：select  count(*)  from  emp          &#x2F;&#x2F;获取到总记录数</li><li>再对要执行的SQL语句：select  *  from  emp 进行改造，在末尾添加 limit ? , ?</li><li>执行改造后的SQL语句：select  *  from  emp  limit  ? , ?</li></ol></blockquote><h5 id="3-1-2-2-代码实现"><a href="#3-1-2-2-代码实现" class="headerlink" title="3.1.2.2 代码实现"></a>3.1.2.2 代码实现</h5><p>当使用了PageHelper分页插件进行分页，就无需再Mapper中进行手动分页了。 在Mapper中我们只需要进行正常的列表查询即可。在Service层中，调用Mapper的方法之前设置分页参数，在调用Mapper方法执行查询之后，解析分页结果，并将结果封装到PageBean对象中返回。</p><p>1、在pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、EmpMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(Integer start, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、EmpServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<br>    <span class="hljs-comment">// 设置分页参数</span><br>    PageHelper.startPage(page, pageSize); <br>    <span class="hljs-comment">// 执行分页查询</span><br>    List&lt;Emp&gt; empList = empMapper.list(name,gender,begin,end); <br>    <span class="hljs-comment">// 获取分页结果</span><br>    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;   <br>    <span class="hljs-comment">//封装PageBean</span><br>    <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult()); <br>    <span class="hljs-keyword">return</span> pageBean;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-2-3-测试"><a href="#3-1-2-3-测试" class="headerlink" title="3.1.2.3 测试"></a>3.1.2.3 测试</h5><p>功能开发完成后，我们重启项目工程，打开postman，发起GET请求，访问 ：<a href="http://localhost:8080/emps?page=1&pageSize=5">http://localhost:8080/emps?page=1&amp;pageSize=5</a></p><p><img src="/assets/image-20221215162008339.png" alt="image-20221215162008339"></p><blockquote><p>后端程序SQL输出：</p><p><img src="/assets/image-20221215174820377.png" alt="image-20221215174820377"></p></blockquote><h3 id="3-2-分页查询-带条件"><a href="#3-2-分页查询-带条件" class="headerlink" title="3.2 分页查询(带条件)"></a>3.2 分页查询(带条件)</h3><p>完了分页查询后，下面我们需要在分页查询的基础上，添加条件。</p><h4 id="3-2-1-需求"><a href="#3-2-1-需求" class="headerlink" title="3.2.1 需求"></a>3.2.1 需求</h4><p><img src="/assets/image-20221215175639974.png" alt="image-20221215175639974"></p><p>通过员工管理的页面原型我们可以看到，员工列表页面的查询，不仅仅需要考虑分页，还需要考虑查询条件。 分页查询我们已经实现了，接下来，我们需要考虑在分页查询的基础上，再加上查询条件。</p><p>我们看到页面原型及需求中描述，搜索栏的搜索条件有三个，分别是：</p><ul><li>姓名：模糊匹配</li><li>性别：精确匹配</li><li>入职日期：范围匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * <br>from emp<br>where <br>  name like concat(&#x27;%&#x27;,&#x27;张&#x27;,&#x27;%&#x27;)   -- 条件1：根据姓名模糊匹配<br>  and gender = 1                   -- 条件2：根据性别精确匹配<br>  and entrydate = between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;  -- 条件3：根据入职日期范围匹配<br>order by update_time desc;<br></code></pre></td></tr></table></figure><p>而且上述的三个条件，都是可以传递，也可以不传递的，也就是动态的。 我们需要使用前面学习的Mybatis中的动态SQL 。</p><h4 id="3-2-2-思路分析"><a href="#3-2-2-思路分析" class="headerlink" title="3.2.2 思路分析"></a>3.2.2 思路分析</h4><p><img src="/assets/image-20221215180528415.png" alt="image-20221215180528415"></p><h4 id="3-2-3-功能开发"><a href="#3-2-3-功能开发" class="headerlink" title="3.2.3 功能开发"></a>3.2.3 功能开发</h4><p>通过查看接口文档：员工列表查询</p><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>请求参数：</p><table><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张</td><td>姓名</td></tr><tr><td>gender</td><td>否</td><td>1</td><td>性别 , 1 男 , 2 女</td></tr><tr><td>begin</td><td>否</td><td>2010-01-01</td><td>范围匹配的开始时间(入职日期)</td></tr><tr><td>end</td><td>否</td><td>2020-01-01</td><td>范围匹配的结束时间(入职日期)</td></tr><tr><td>page</td><td>是</td><td>1</td><td>分页查询的页码，如果未指定，默认为1</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>分页查询的每页记录数，如果未指定，默认为10</td></tr></tbody></table></blockquote><p>在原有分页查询的代码基础上进行改造：</p><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="hljs-params">                       String name, Short gender,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize,name, gender, begin, end);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize, name, gender, begin, end);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page     页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize 每页展示记录数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name     姓名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender   性别</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> begin   开始时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end     结束时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//设置分页参数</span><br>        PageHelper.startPage(page, pageSize);<br>        <span class="hljs-comment">//执行条件分页查询</span><br>        List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);<br>        <span class="hljs-comment">//获取查询结果</span><br>        Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;<br>        <span class="hljs-comment">//封装PageBean</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult());<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//获取当前页的结果列表</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 条件分页查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>                name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                and gender = #&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-4-功能测试"><a href="#3-2-4-功能测试" class="headerlink" title="3.2.4 功能测试"></a>3.2.4 功能测试</h4><p>功能开发完成后，重启项目工程，打开postman，发起GET请求：</p><p><img src="/assets/image-20221215182344380.png" alt="image-20221215182344380"></p><blockquote><p>控制台SQL语句：</p><p><img src="/assets/image-20221215182952789.png" alt="image-20221215182952789"></p></blockquote><h4 id="3-2-5-前后端联调"><a href="#3-2-5-前后端联调" class="headerlink" title="3.2.5 前后端联调"></a>3.2.5 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215183510458.png" alt="image-20221215183510458"></p><h3 id="3-3-删除员工"><a href="#3-3-删除员工" class="headerlink" title="3.3 删除员工"></a>3.3 删除员工</h3><p>查询员完成之后，我们继续开发新的功能：删除员工。</p><h4 id="3-3-1-需求"><a href="#3-3-1-需求" class="headerlink" title="3.3.1 需求"></a>3.3.1 需求</h4><p><img src="/assets/image-20221215183657413.png" alt="image-20221215183657413"></p><p>当我们勾选列表前面的复选框，然后点击 “批量删除” 按钮，就可以将这一批次的员工信息删除掉了。也可以只勾选一个复选框，仅删除一个员工信息。</p><p>问题：我们需要开发两个功能接口吗？一个删除单个员工，一个删除多个员工</p><p>答案：不需要。 只需要开发一个功能接口即可（删除多个员工包含只删除一个员工）</p><h4 id="3-3-2-接口文档"><a href="#3-3-2-接口文档" class="headerlink" title="3.3.2 接口文档"></a>3.3.2 接口文档</h4><p><strong>删除员工</strong></p><ul><li><p>基本信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">请求路径：<span class="hljs-regexp">/emps/</span>&#123;ids&#125;<br><br>请求方式：<span class="hljs-keyword">DELETE</span><br><br>接口描述：该接口用于批量删除员工的数据信息<br></code></pre></td></tr></table></figure></li><li><p>请求参数</p><p>参数格式：路径参数</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>示例</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>ids</td><td>数组 array</td><td>1,2,3</td><td>必须</td><td>员工的id数组</td></tr></tbody></table><p>请求参数样例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/emps/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure></li><li><p>响应数据</p><p>参数格式：application&#x2F;json</p><p>参数说明：</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td>响应码，1 代表成功，0 代表失败</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td>提示信息</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td>返回的数据</td></tr></tbody></table><p>响应数据样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-3-思路分析"><a href="#3-3-3-思路分析" class="headerlink" title="3.3.3 思路分析"></a>3.3.3 思路分析</h4><p><img src="/assets/image-20221215184714815.png" alt="image-20221215184714815"></p><blockquote><p>接口文档规定：</p><ul><li>前端请求路径：&#x2F;emps&#x2F;{ids}</li><li>前端请求方式：DELETE</li></ul><p>问题1：怎么在controller中接收请求路径中的路径参数？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@PathVariable</span><br></code></pre></td></tr></table></figure><p>问题2：如何限定请求方式是delete？</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@DeleteMapping</span><br></code></pre></td></tr></table></figure><p>问题3：在Mapper接口中，执行delete操作的SQL语句时，条件中的id值是不确定的是动态的，怎么实现呢？</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Mybatis中的动态<span class="hljs-keyword">SQL</span>：<span class="hljs-keyword">foreach</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="3-3-4-功能开发"><a href="#3-3-4-功能开发" class="headerlink" title="3.3.4 功能开发"></a>3.3.4 功能开发</h4><p>通过查看接口文档：删除员工</p><blockquote><p>请求路径：&#x2F;emps&#x2F;{ids}</p><p>请求方式：DELETE</p><p>请求参数：路径参数 {ids}</p><p>响应数据：json格式</p></blockquote><p><strong>EmpController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/emps&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;ids&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> List&lt;Integer&gt; ids)</span>&#123;<br>        empService.delete(ids);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//条件分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="hljs-params">                       String name, Short gender,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">                       <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//记录日志</span><br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize,name, gender, begin, end);<br>        <span class="hljs-comment">//调用业务层分页查询功能</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize, name, gender, begin, end);<br>        <span class="hljs-comment">//响应</span><br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids id集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> &#123;<br>        empMapper.delete(ids);<br>    &#125;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//批量删除</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br><br>    <span class="hljs-comment">//省略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--批量删除员工--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>        delete from emp where id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 省略... --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-5-功能测试"><a href="#3-3-5-功能测试" class="headerlink" title="3.3.5 功能测试"></a>3.3.5 功能测试</h4><p>功能开发完成后，重启项目工程，打开postman，发起DELETE请求：</p><p><img src="/assets/image-20221215190229696.png" alt="image-20221215190229696"></p><blockquote><p>控制台SQL语句：</p><p><img src="/assets/image-20221215190948723.png" alt="image-20221215190948723"></p></blockquote><h4 id="3-3-6-前后端联调"><a href="#3-3-6-前后端联调" class="headerlink" title="3.3.6 前后端联调"></a>3.3.6 前后端联调</h4><p>打开浏览器，测试后端功能接口：</p><p><img src="/assets/image-20221215190606676.png" alt="image-20221215190606676"></p><p><img src="/assets/image-20221215190640539.png" alt="image-20221215190640539"></p><p><img src="/assets/image-20221215190753313.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBootWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis入门到实践</title>
    <link href="/2024/10/16/MyBatis%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/10/16/MyBatis%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis入门到实践"><a href="#MyBatis入门到实践" class="headerlink" title="MyBatis入门到实践"></a>MyBatis入门到实践</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>MyBatis是一款优秀的 <strong>持久层</strong>(Dao) 框架，用于简化JDBC的开发。</li><li>MyBatis本是Apache的一个开源项目iBatis,2010年这个项目由apache迁移到了googlecode，并且改名为MyBatis。2013年11月迁移到Github。</li><li>官网：<a href="https://blog.mybatis.org/">The MyBatis Blog</a></li></ul><h2 id="MyBatis入门"><a href="#MyBatis入门" class="headerlink" title="MyBatis入门"></a>MyBatis入门</h2><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="使用Mybatis查询所有用户数据"><a href="#使用Mybatis查询所有用户数据" class="headerlink" title="使用Mybatis查询所有用户数据"></a>使用Mybatis查询所有用户数据</h4><ol><li>准备工作(创建springboot工程、数据库表user、实体类User)</li></ol><p><code>MyBatis Framework</code>、<code>MySQL Driver</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.pojo.User</span><br><br><span class="hljs-comment">// ptg插件一键生成JavaBean</span><br><span class="hljs-comment">// 有参/无参构造器、Getter&amp;Setter、ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">short</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">short</span> gender;<br>    <span class="hljs-keyword">private</span> String phone;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</li></ol><p><code>Data Source</code>、<code>Drivers</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># resources.application.properties</span><br><br><span class="hljs-attr">spring.datasource.driver-class-name</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span> = <span class="hljs-string">jdbc:mysql://localhost:3306/数据库名</span><br><span class="hljs-attr">spring.datasource.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span> = <span class="hljs-string">1234</span><br></code></pre></td></tr></table></figure><ol start="3"><li>编写SQL语句(注解&#x2F;XML)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//com.mapper.UserMapper</span><br><br><span class="hljs-meta">@Mapper</span><span class="hljs-comment">//在运行时，会自动实现该接口的实现类对象(代理对象)，并且将该对象交给IOC容器管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><p><code>Show Context Actions</code>-&gt;<code>inject language or reference</code>-&gt;<code>MySQL(SQL)</code>——配置SQL语句联想报错提示</p><p><code>Data Source</code>-&gt;<code>MySQL</code>-&gt;<code>DataBase</code>——配置数据库连接后表名、列名…联想提示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span> <span class="hljs-comment">//springboot整合单元测试的注解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisQuickstartApplictionTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testListUser</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = userMapper.list();<br>        userList.stream().forEach(user -&gt; &#123;<br>            System.out.println(user);<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDBC介绍"><a href="#JDBC介绍" class="headerlink" title="JDBC介绍"></a>JDBC介绍</h3><h4 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h4><p><strong>JDBC</strong>：（<strong>J</strong>ava <strong>D</strong>ata <strong>B</strong>ase <strong>C</strong>onnectivity），就是使用Java语言操作关系型数据库的一套APl。</p><ul><li>Sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库 <strong>驱动jar包</strong></li><li>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h4 id="JDBC示例代码"><a href="#JDBC示例代码" class="headerlink" title="JDBC示例代码"></a>JDBC示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.注册驱动</span><br>Class.forName(<span class="hljs-string">&quot;com/mysql.cj.jdbc.Driver&quot;</span>);<br><br><span class="hljs-comment">//2.获取连接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>Connection conn= DriverManager.getConnection(url,username,password);<br><br><span class="hljs-comment">//3.获取执行SQL的对象Statement，执行SQL</span><br>String sql= <span class="hljs-string">&quot;select * from user&quot;</span>;<br>Statementstatement= conn.createstatement();<br>ResultSet resultSet= statement.executeQuery(sql);<br>List&lt;User&gt; userList= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name ）；</span><br><span class="hljs-string">    short age = resuItSet.getShort(&quot;</span>age<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    short gender= resultSet.getShort(&quot;</span>gender<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    String phone = resultSet.getString(&quot;</span>phone<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    Useruser= new user(id,name,age,gender,phone);</span><br><span class="hljs-string">    userList.add(user);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">                                      </span><br><span class="hljs-string">//4.释放资源</span><br><span class="hljs-string">statement.close();</span><br><span class="hljs-string">connection.close();</span><br></code></pre></td></tr></table></figure><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h4><ul><li>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li></ul><p><strong>当某用户从数据库连接池获取连接后，一段时间内该连接一直处于闲置状态，该连接会重回连接池。</strong></p><h4 id="连接池的优势"><a href="#连接池的优势" class="headerlink" title="连接池的优势"></a>连接池的优势</h4><ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul><h4 id="标准接口：DataSource"><a href="#标准接口：DataSource" class="headerlink" title="标准接口：DataSource"></a>标准接口：DataSource</h4><ul><li>官方(sun)提供的数据库连接池接口，由第三方组织实现此接口。</li><li>功能：获取连接  <code>Connection getConnection() throws SQLException</code></li></ul><h5 id="常见产品"><a href="#常见产品" class="headerlink" title="常见产品"></a>常见产品</h5><ul><li>C3P0</li><li>DBCP</li><li>Druid  (德鲁伊)<ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是Java语言最好的数据库连接池之一</li></ul></li><li>Hikari  (Springboot默认)</li></ul><h4 id="切换Druid数据库连接池"><a href="#切换Druid数据库连接池" class="headerlink" title="切换Druid数据库连接池"></a>切换Druid数据库连接池</h4><p>官方网址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties</span><br><br><span class="hljs-attr">spring.datasource.driver-class-name</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span> = <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-attr">spring.datasource.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span> = <span class="hljs-string">1234 </span><br></code></pre></td></tr></table></figure><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><h4 id="什么是Lombok"><a href="#什么是Lombok" class="headerlink" title="什么是Lombok?"></a>什么是Lombok?</h4><ul><li><p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p></li><li><p><code>@Getter/@Setter</code>——为所有的属性提供<code>get/set</code>方法</p></li><li><p><code>@ToString</code>——会给类自动生成易阅读的<code>toString</code>方法</p></li><li><p><code>@EqualsAndHashCode</code>——根据类所拥有的非静态字段自动重写<code>equals</code>方法和<code>hashCode</code>方法</p></li><li><p><code>@Data</code>——<strong>提供了更综合的生成代码</strong></p></li></ul><p>（<code>@Getter</code>+<code>@Setter</code>+<code>@ToString</code>+<code>@EqualsAndHashCode</code>）</p><ul><li><p><code>@NoArgsConstructor</code>——为实体类生成 <strong>无参的构造器</strong> 方法</p></li><li><p><code>@AllArgsConstructor</code>——为实体类生成除了static修饰的字段之外 <strong>全参的构造器</strong> 方法</p></li><li><p><code>@Slf4j</code> ——自动生成日志记录</p></li><li><p>在 Java 类上使用这个注解，Lombok 库会在编译时自动为该类添加一个 SLF4J（Simple Logging Facade for Java）日志变量，通常这个变量的名字是 <code>log</code>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Doing something...&quot;</span>);<br>        <span class="hljs-comment">// 其他代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Lombok依赖文件"><a href="#Lombok依赖文件" class="headerlink" title="Lombok依赖文件"></a>Lombok依赖文件</h4><p>Lombok插件(较新版IDEA自带): <code>Settings</code>-&gt;<code>Plugins</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- pom.xml --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="MyBatis增删改查"><a href="#MyBatis增删改查" class="headerlink" title="MyBatis增删改查"></a>MyBatis增删改查</h2><h4 id="需求案例：员工管理的需求开发"><a href="#需求案例：员工管理的需求开发" class="headerlink" title="需求案例：员工管理的需求开发"></a>需求案例：员工管理的需求开发</h4><h5 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h5><ul><li>准备数据库表emp</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp (<br>id <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;ID&#x27;</span>,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span> comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>password <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;123456&#x27;</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>gender tinyint unsigned <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;性别，说明：1 男，2 女&#x27;</span>)<br>image <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>) comment <span class="hljs-string">&#x27;图像&#x27;</span>,<br>job tinyint unsigned comment <span class="hljs-string">&#x27;职位，说明：1 班主任，2 讲师，3 学工主管，4 教研主管 5 咨询师&#x27;</span>,<br>entrydate <span class="hljs-type">date</span> comment <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>dept_id <span class="hljs-type">int</span> unsigned comment <span class="hljs-string">&#x27;部门ID&#x27;</span>,<br>create_time datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>update_time datetime <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>)comment <span class="hljs-string">&#x27;员工表&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</li></ul><p><code>Lombok</code>、<code>MySQL Driver</code>、<code>MyBatis Framework</code></p><ul><li>application.properties中引入数据库连接信息</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties</span><br><br><span class="hljs-attr">spring.datasource.driver-class-name</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span> = <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-attr">spring.datasource.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span> = <span class="hljs-string">1234 </span><br></code></pre></td></tr></table></figure><ul><li>创建对应的实体类Emp（实体类属性采用驼峰命名）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.pojo.Emp</span><br><span class="hljs-comment">// 下划线命名改驼峰命名，如：update_time --&gt; updateTime</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstuctor</span><br><span class="hljs-meta">@AllArgsConstuctor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Short job;<br>    <span class="hljs-keyword">private</span> LocalDate entrydate; <span class="hljs-comment">//date-年月日</span><br>    <span class="hljs-keyword">private</span> Integer deptId;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">//datetime-年月日时分秒</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>准备Mapper接口EmpMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h6><ul><li>根据主键ID删除</li><li>根据主键ID批量删除（动态SQL）</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 指定mybatis输出日志的位置，输出到控制台</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span> = <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br>    <span class="hljs-comment">// 根据ID删除数据</span><br>    <span class="hljs-meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> empMapper.delete(<span class="hljs-number">17</span>);<br>        System.out.println(<span class="hljs-string">&quot;根据ID删除数据的记录数：&quot;</span>+delete)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="新增"><a href="#新增" class="headerlink" title="新增"></a><strong>新增</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br>    <span class="hljs-comment">// 新增员工</span><br>    <span class="hljs-meta">@Insert(&quot;insert into&quot;+ </span><br><span class="hljs-meta">          &quot;emp(username,name,gender,image,job,entrydate,dept_id,create_time,update_time)&quot;</span><br><span class="hljs-meta">            +&quot;values(#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 构造员工对象</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setUsername(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        ......<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>); <span class="hljs-comment">//(short)1：一个类型转换表达式,将整数值1转换为short类型</span><br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setCreateTime(LocalDateTime.now());<br>        emp.setUpdateTime(LocalDateTime.now());<br>        <br>        <span class="hljs-comment">// 执行新增员工信息操作</span><br>        empMapper.insert(emp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="新增-主键返回"><a href="#新增-主键返回" class="headerlink" title="新增(主键返回)"></a><strong>新增</strong>(主键返回)</h6><p>主键返回：在数据添加成功后，需要获取插入数据库数据的主键。</p><p>如：</p><ul><li>先保存套餐信息，并获取<strong>套餐ID</strong></li><li>再保存套餐菜品关联信息(需要记录<strong>套餐ID</strong>、菜品ID)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br>    <span class="hljs-comment">// 新增员工并返回主键</span><br>    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span> <span class="hljs-comment">//将生成的主键保存在emp类的id参数中</span><br>    <span class="hljs-meta">@Insert(&quot;insert into&quot;+ </span><br><span class="hljs-meta">          &quot;emp(username,name,gender,image,job,entrydate,dept_id,create_time,update_time)&quot;</span><br><span class="hljs-meta">            +&quot;values(#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br>    <span class="hljs-comment">// 根据ID删除数据</span><br>    <span class="hljs-meta">@Update(&quot;update emp set username = #&#123;username&#125;,name = #&#123;name&#125;,gender = #&#123;gender&#125;,image = #&#123;image&#125;,job = #&#123;job&#125;,entrydate = #&#123;entrydate&#125;,dept_id = #&#123;deptId&#125;,update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 构造员工对象</span><br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>        emp.setId(<span class="hljs-number">18</span>);<br>        emp.setUsername(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        ......<br>        emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>); <span class="hljs-comment">//(short)1：一个类型转换表达式,将整数值1转换为short类型</span><br>        emp.setEntrydate(LocalDate.of(<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>        emp.setUpdateTime(LocalDateTime.now());<br>        <br>        <span class="hljs-comment">// 执行新增员工信息操作</span><br>        empMapper.update(emp);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h6 id="查询-根据主键ID查询"><a href="#查询-根据主键ID查询" class="headerlink" title="查询(根据主键ID查询)"></a><strong>查询</strong>(根据主键ID查询)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br><span class="hljs-comment">// 根据主键ID查询员工</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empMapper.getById(<span class="hljs-number">20</span>);<br>        System.out.println(Emp emp); <br>        <span class="hljs-comment">//其中查询返回的deptId,createTime,updateTime均为null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h6><ul><li><p>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</p></li><li><p>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</p></li><li><p>方案一：给字段起别名，让别名与实体类属性一致</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select id,...,dept_id as deptId,create_time as createTime...&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>方案二：通过<code>@Results</code>注解手动映射封装</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(column = &quot;dept_id&quot;,property = &quot;deptId&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;update_time&quot;,property = &quot;updateTime&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><ul><li>方案三：开启MyBatis的驼峰命名自动映射开关</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># resources.application.properties</span><br><span class="hljs-comment">#开启驼峰命名自动映射，即从数据库字段名 a_column 映射到Java属性名 aColumn。</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span> = <span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h6 id="查询-根据条件查询"><a href="#查询-根据条件查询" class="headerlink" title="查询(根据条件查询)"></a>查询(根据条件查询)</h6><ul><li>根据输入的员工姓名、员工性别、入职时间搜素满足条件的员工信息。</li><li>其中员工姓名，支持模糊匹配；性别进行精确查询；入职时间进行范田查询。</li><li>支持分页查询。</li><li>并对查询的结果，根据最后修改时间进行倒序排序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <br><span class="hljs-comment">// 根据主键ID查询员工</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;))</span> <span class="hljs-type">and</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time DESC<span class="hljs-string">&quot;)</span><br><span class="hljs-string">    public List&lt;Emp&gt; list(String name,Short gender,LocalDate begin,LocalDate end);</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>        empMapper.list(<span class="hljs-string">&quot;张&quot;</span>,(<span class="hljs-type">short</span>)<span class="hljs-number">1</span>,LocalDate.of(<span class="hljs-number">2010</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),LocalDate.of(<span class="hljs-number">2020</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h2><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ul><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）。<ul><li>创建包结构<code>new directory</code>-&gt;<code>com/dhu/mapper</code></li></ul></li></ul><p><code>src.main.java.com.mapper.EmpMapper</code>(Mapper接口)</p><p><code>src.main.resources.com.mapper.EmpMapper.xml</code>(XML映射文件)</p><ul><li>XML映射文件的namespace属性为Mapper接口全限定名一致。</li><li>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</li></ul><p><code>copy reference</code></p><p><a href="https://mybatis.net.cn/getting-started.html">入门_MyBatis中文网</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// src.main.java.com.dhu.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name,Short gender,LocalDate begin,LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- src.main.resources.com.dhu.mapper.EmpMapper.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">  <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">  <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.dhu.mapper.EmpMapper&quot;</span>&gt;</span>       <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>    select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h3><ul><li>MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。<ul><li><code>Settings -&gt; Plugins</code></li><li>跳转到对应的接口&#x2F;方法</li></ul></li></ul><h2 id="MyBatis动态SQL"><a href="#MyBatis动态SQL" class="headerlink" title="MyBatis动态SQL"></a>MyBatis动态SQL</h2><ul><li><p><strong>动态SQL</strong>：随着用户的输入或外部条件的变化而变化的SQL语句，我们称为动态SQL。</p><h3 id=""><a href="#" class="headerlink" title="&lt;if&gt; "></a><code>&lt;if&gt; </code></h3><ul><li>动态条件查询<code>&lt;where&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// src.main.java.com.dhu.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name,Short gender,LocalDate begin,LocalDate end)</span>; <span class="hljs-comment">//动态条件查询</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- src.main.resources.com.dhu.mapper.EmpMapper.xml --&gt;<br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.dhu.mapper.EmpMapper&quot;</span>&gt;       <br>&lt;select id=<span class="hljs-string">&quot;list&quot;</span> resultType=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;<br>    select * <br>    from emp <br>    &lt;where&gt; <span class="hljs-comment">//动态生成where关键字、自动按条件添加and</span><br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name != null&quot;</span>&gt; <span class="hljs-comment">//使用test属性进行条件判断，若条件为true则拼接</span><br>                name like <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)</span> <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender != null&quot;</span>&gt;<br>                <span class="hljs-type">and</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> #&#123;gender&#125; <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;<br>                and entrydate between #&#123;begin&#125; and #&#123;end&#125; <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/where&gt;<br>order by update_time desc<br>&lt;/select&gt;<br>&lt;/mapper&gt;   <br></code></pre></td></tr></table></figure><ul><li>动态更新<code>&lt;set&gt;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// src.main.java.com.dhu.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Update</span><span class="hljs-params">(Emp emp)</span>; <span class="hljs-comment">//动态更新员工信息</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- src.main.resources.com.dhu.mapper.EmpMapper.xml --&gt;<br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.dhu.mapper.EmpMapper&quot;</span>&gt;       <br>&lt;update id=<span class="hljs-string">&quot;Update&quot;</span> resultType=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;<br>    update emp<br>&lt;set&gt; <br>    &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username != null&quot;</span>&gt;<br>    username = #&#123;username&#125;,<br>&lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name != null&quot;</span>&gt;<br>name = #&#123;name&#125;,<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender != null&quot;</span>&gt;<br>gender = #&#123;gender&#125;,<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image != null&quot;</span>&gt;<br>image = #&#123;image&#125;,<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;job != null&quot;</span>&gt;<br>job = #&#123;job&#125;,<br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;<br>entrydate = #&#123;entrydate&#125;,<br>&lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;deptId != null&quot;</span>&gt;<br>dept_id = #&#123;deptId&#125;,<br>&lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;<br>update_time = #&#123;updateTime&#125;<br>&lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/set&gt;<br><span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> #&#123;id&#125;<br>&lt;/update&gt;<br>&lt;/mapper&gt;   =<br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="&lt;foreach&gt;"></a><code>&lt;foreach&gt;</code></h3><ul><li>批量删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// src.main.java.com.dhu.mapper.EmpMapper</span><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>; <span class="hljs-comment">//批量删除员工信息</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- src.main.resources.com.dhu.mapper.EmpMapper.xml --&gt;<br>&lt;!--<br>    collection:遍历的集合名称<br>    item:遍历出来的元素<br>separator:分隔符<br>    open:遍历开始前拼接的SQL片段<br>    close：遍历结束后拼接的SQL片段<br>--&gt;<br>    <br>&lt;mapper namespace=<span class="hljs-string">&quot;com.dhu.mapper.EmpMapper&quot;</span>&gt;       <br>&lt;delete id=<span class="hljs-string">&quot;deleteByIds&quot;</span> resultType=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;<br>delete from emp where id in<br>    &lt;<span class="hljs-type">foreach</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ids&quot;</span> item = <span class="hljs-string">&quot;id&quot;</span> separator = <span class="hljs-string">&quot;,&quot;</span> open = <span class="hljs-string">&quot;(&quot;</span> close = <span class="hljs-string">&quot;)&quot;</span>&gt;<br>        #&#123;id&#125;<br>    &lt;/foreach&gt;<br>    &lt;/delete&gt;<br>&lt;/mapper&gt;  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// test.java.com</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisCrudApplicationTests</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteByIds</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Integer&gt; ids = Arrays.asList(<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>);<br>        empMapper.deleteById;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title="&lt;sql&gt;&lt;include&gt;"></a><code>&lt;sql&gt;&lt;include&gt;</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- src.main.resources.com.dhu.mapper.EmpMapper.xml --&gt;<br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.dhu.mapper.EmpMapper&quot;</span>&gt;<br>    <br>    &lt;<span class="hljs-type">sql</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;commonSelect&quot;</span>&gt; <span class="hljs-comment">// 封装SQL语句并指定ID</span><br>    select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp<br>    &lt;/sql&gt;<br>    <br>&lt;select id=<span class="hljs-string">&quot;list&quot;</span> resultType=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;<br>    &lt;include refid=<span class="hljs-string">&quot;commonSelect&quot;</span>/&gt; <span class="hljs-comment">// 复用SQL语句</span><br>    &lt;where&gt; <br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name != null&quot;</span>&gt; <br>                name like <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)</span> <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gender != null&quot;</span>&gt;<br>                <span class="hljs-type">and</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> #&#123;gender&#125; <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>            &lt;<span class="hljs-type">if</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;<br>                and entrydate between #&#123;begin&#125; and #&#123;end&#125; <br>            &lt;/<span class="hljs-keyword">if</span>&gt;<br>        &lt;/where&gt;<br>order by update_time desc<br>&lt;/select&gt;<br>&lt;/mapper&gt;   <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-IDEA白嫖指南</title>
    <link href="/2024/09/09/2024-IDEA%E7%99%BD%E5%AB%96%E6%8C%87%E5%8D%97/"/>
    <url>/2024/09/09/2024-IDEA%E7%99%BD%E5%AB%96%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-IDEA白嫖指南"><a href="#2024-IDEA白嫖指南" class="headerlink" title="2024-IDEA白嫖指南"></a>2024-IDEA白嫖指南</h1><ul><li>注：有效期仅至 <strong>2025.8.1</strong></li></ul><h2 id="Jetbrains官网下载2022-2-x版本的IDEA"><a href="#Jetbrains官网下载2022-2-x版本的IDEA" class="headerlink" title="Jetbrains官网下载2022.2.x版本的IDEA"></a>Jetbrains官网下载2022.2.x版本的IDEA</h2><p>下载链接：<a href="https://download.jetbrains.com/idea/ideaIU-2022.2.5.exe?_gl=1">https://download.jetbrains.com/idea/ideaIU-2022.2.5.exe?_gl=1</a></p><h2 id="准备激活工具"><a href="#准备激活工具" class="headerlink" title="准备激活工具"></a>准备激活工具</h2><p>链接：<a href="https://pan.baidu.com/s/1ucK7_vCVYLwT3qdVVsRqKQ">https://pan.baidu.com/s/1ucK7_vCVYLwT3qdVVsRqKQ</a><br>提取码：1111</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p><img src="/img/procedure.png"></p><h2 id="激活过程"><a href="#激活过程" class="headerlink" title="激活过程"></a>激活过程</h2><p>在IDEA本体关闭的情况下，到其安装路径的bin目录<br><img src="/img/procedure2.png"></p><ol><li>在激活软件中先在软件左下角选择IntelliJ IDEA 2022.2.x</li><li>browse中选择先前bin目录下的IDEA64.exe</li><li>激活软件中点击activate并点击copy code</li><li>在IntelliJ IDEA中粘贴刚刚复制的激活码</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware配置桥接模式联网</title>
    <link href="/2024/09/05/VMware%E9%85%8D%E7%BD%AE%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E8%81%94%E7%BD%91/"/>
    <url>/2024/09/05/VMware%E9%85%8D%E7%BD%AE%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E8%81%94%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="VMware配置桥接模式联网"><a href="#VMware配置桥接模式联网" class="headerlink" title="VMware配置桥接模式联网"></a>VMware配置桥接模式联网</h1><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><p><a href="https://www.cnblogs.com/liugp/p/16410259.html#%E4%BA%8Cbridged%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F">VMware三种网络模式详解 - 大数据老司机 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/qq_39241682/article/details/137185104#:~:text=Linux%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9AVMware">Linux基础篇：VMware centos7虚拟机网络配置——桥接模式_虚拟机centos 桥接模式-CSDN博客</a></p><ul><li>VMware1——hostonly网络适配器</li><li>VMware8——NAT网络适配器</li><li>VMware0——桥接模式</li></ul><h2 id="桥接模式是什么？"><a href="#桥接模式是什么？" class="headerlink" title="桥接模式是什么？"></a>桥接模式是什么？</h2><p><code>什么是桥接模式？桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示：</code><br><img src="/img/bridge.png"></p><h3 id="1-配置桥接模式的具体网卡"><a href="#1-配置桥接模式的具体网卡" class="headerlink" title="1.配置桥接模式的具体网卡"></a>1.配置桥接模式的具体网卡</h3><p><u>VMware Workstation-&gt;编辑-&gt;虚拟网络编辑器</u></p><p><img src="/img/VMware-1.png"></p><h3 id="2-修改虚拟机网卡设置"><a href="#2-修改虚拟机网卡设置" class="headerlink" title="2. 修改虚拟机网卡设置"></a>2. 修改虚拟机网卡设置</h3><p><u>设置-&gt;网络适配器</u></p><p><img src="/img/VMware-2.png"></p><h3 id="3-修改网络配置文件"><a href="#3-修改网络配置文件" class="headerlink" title="3.修改网络配置文件"></a>3.修改网络配置文件</h3><h4 id="3-1-查看物理主机IP信息"><a href="#3-1-查看物理主机IP信息" class="headerlink" title="3.1 查看物理主机IP信息"></a>3.1 查看物理主机IP信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig /all <span class="hljs-comment">#查看主机IP信息</span><br>arp -a <span class="hljs-comment">#选择主机空闲IP</span><br></code></pre></td></tr></table></figure><p><img src="/img/VMware-3.png"></p><h4 id="3-2-VI编辑网卡配置文件"><a href="#3-2-VI编辑网卡配置文件" class="headerlink" title="3.2 VI编辑网卡配置文件"></a>3.2 VI编辑网卡配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">BOOTPROTO=<span class="hljs-string">&quot;static&quot;</span> <span class="hljs-comment">#设置为静态IP地址</span><br>ONBOOT=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-comment">#启动时是否激活网卡</span><br>HWADDR=00:0C:29:8D:D0:91 <span class="hljs-comment">#可不配置，若要配置见VMware-4.png</span><br>IPADDR= <span class="hljs-comment">#主机空闲IP</span><br>NETMASK= <span class="hljs-comment">#主机子网掩码</span><br>GATEWAY= <span class="hljs-comment">#主机网关</span><br>DNS1=8.8.8.8<br>DNS2=114.114.114.114<br></code></pre></td></tr></table></figure><h4 id="3-3-重启网卡使配置文件生效"><a href="#3-3-重启网卡使配置文件生效" class="headerlink" title="3.3 重启网卡使配置文件生效"></a>3.3 重启网卡使配置文件生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart network<br></code></pre></td></tr></table></figure><p><img src="/img/VMware-4.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode刷题——小技巧总结</title>
    <link href="/2024/09/02/Leetcode%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/02/Leetcode%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode刷题——小技巧总结"><a href="#Leetcode刷题——小技巧总结" class="headerlink" title="Leetcode刷题——小技巧总结"></a>Leetcode刷题——小技巧总结</h1><h2 id="列表如何整体进行加减运算？"><a href="#列表如何整体进行加减运算？" class="headerlink" title="列表如何整体进行加减运算？"></a>列表如何整体进行加减运算？</h2><h3 id="方法一：使用列表推导式"><a href="#方法一：使用列表推导式" class="headerlink" title="方法一：使用列表推导式"></a>方法一：使用列表推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">original_list = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>value_to_subtract = <span class="hljs-number">5</span><br><br>new_list = [x - value_to_subtract <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> original_list]<br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><h3 id="方法二：使用map函数"><a href="#方法二：使用map函数" class="headerlink" title="方法二：使用map函数"></a>方法二：使用<code>map</code>函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">original_list = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>value_to_subtract = <span class="hljs-number">5</span><br><br>new_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x - value_to_subtract, original_list))<br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><h2 id="往复运动-边界条件-step变量"><a href="#往复运动-边界条件-step变量" class="headerlink" title="往复运动&#x3D;边界条件+step变量"></a>往复运动&#x3D;边界条件+step变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, numRows: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">if</span> numRows == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> numRows &gt;= <span class="hljs-built_in">len</span>(s):<br>        <span class="hljs-keyword">return</span> s<br><br>    ans = [<span class="hljs-string">&#x27;&#x27;</span>] * numRows<br>    index, step = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>        ans[index] += char<br>        <span class="hljs-keyword">if</span> index == <span class="hljs-number">0</span>:<br>            step = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> index == numRows - <span class="hljs-number">1</span>:<br>            step = -<span class="hljs-number">1</span><br>        index += step<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(ans)<br></code></pre></td></tr></table></figure><h2 id="zip函数的使用"><a href="#zip函数的使用" class="headerlink" title="zip函数的使用"></a>zip函数的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>list2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>zipped = <span class="hljs-built_in">zip</span>(list1, list2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(zipped))  <span class="hljs-comment"># 输出: [(1, &#x27;a&#x27;), (2, &#x27;b&#x27;), (3, &#x27;c&#x27;)]</span><br></code></pre></td></tr></table></figure><h2 id="列表逆序"><a href="#列表逆序" class="headerlink" title="列表逆序"></a>列表逆序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例列表</span><br>words = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><br><span class="hljs-comment"># 方法一：使用 reversed 函数</span><br>reversed_words = <span class="hljs-built_in">reversed</span>(words)<br>result = <span class="hljs-string">&#x27; &#x27;</span>.join(reversed_words)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出: cherry banana apple</span><br><br><span class="hljs-comment"># 方法二：使用切片操作</span><br>reversed_words = words[::-<span class="hljs-number">1</span>]<br>result = <span class="hljs-string">&#x27; &#x27;</span>.join(reversed_words)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出: cherry banana apple</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用操作</title>
    <link href="/2024/09/02/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/09/02/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<ul><li><p>远程连接服务器 <code>ssh 43.130.227.143</code></p></li><li><p>查看目前所在目录位置 <code>pwd</code></p></li><li><p>查看网络设备信息 <code>ifconfig</code></p></li><li><p>检查服务器下的内存是否足够 <code>free -h</code></p></li><li><p>查看磁盘空间是否足够 <code>df -lh</code></p><ul><li><code>df(diskfree) 是一个用来检查文件系统磁盘空间使用情况的命令行工具。-lh 选项是 df 命令的参数，其中 -l 表示列出所有本地文件系统的信息，而 -h 表示以人类可读的格式（human-readable format）显示磁盘空间大小，即将磁盘空间大小转换为人们更容易理解的单位，如 GB、MB 等，而不是默认的块（blocks）。</code></li></ul></li><li><p>常用创建项目流程</p><ol><li>新建目录 <code>mkdir xxx</code></li></ol></li></ul><ol start="2"><li><p>拉取代码 <code>git clone xxx</code></p></li><li><p>展示当前目录下文件 <code>ls</code></p></li><li><p>查看当前目录下各文件占用空间 <code>du -sh</code></p><ul><li><code>du(diskusage) 是一个用于估算文件或目录占用的磁盘空间的命令行工具。-sh 选项是 du 命令的参数，其中 -s(summarize) 表示汇总目录的大小，而不是列出目录中每个文件的大小</code></li></ul></li><li><p>输出文件内容 <code>cat xxx eg:cat README.md</code></p></li><li><p>查看系统版本 <code>uname -a</code></p><ul><li><code>uname 是一个命令行工具，用于打印系统信息。uname 的名字来源于 “UNIX name”，它可以显示操作系统的类型、主机名、内核版本、内核发行版等信息。</code></li></ul></li><li><p>安装编译器 <code>yum install xxx</code></p><ul><li><p><code>yum 是一个包管理器，用于在基于Red Hat的系统（如Red Hat Enterprise Linux、CentOS和Fedora）上安装、更新、删除和管理软件包。yum 代表 “Yellowdog Updater, Modified”，它是一个前端工具，用于处理RPM（Red Hat Package Manager）软件包。</code></p></li><li><p><code>请注意，使用 yum 需要具有管理员权限，因此通常需要在命令前加上 sudo，除非你是 root 用户。</code></p></li></ul></li><li><p>查看对应编译器版本 <code>java -version</code></p></li><li><p>查找编译器安装路径 <code>which java</code></p></li><li><p>在网站下载对应文件 <code>wget xxx(url)</code></p></li></ol><pre><code class="hljs">+   `wget 是一个在命令行下工作的非交互式网络下载工具，它支持 HTTP、HTTPS 和 FTP 协议。wget 的名字来源于 “World Wide Web” 和 “get”，它可以用来从网络上下载文件。wget 的特点包括支持断点续传、下载整个网站、后台下载等。`</code></pre><ol start="11"><li>解压对应文件 <code>tar -zxvf xxx(文件名)</code></li></ol><pre><code class="hljs">+   `tar 本身是 “tape archive”（磁带归档）的缩写，最初设计用于磁带备份，但现在广泛用于打包和压缩文件和目录。`    +   `tar -zxvf 命令是 tar 工具的一个常用命令组合，用于解压一个gzip压缩的tar归档文件。`    +   `-z：表示同时使用gzip工具来解压gzip压缩的tar文件（文件扩展名为 .tar.gz 或 .tgz）。`    +   `-x：表示解包或解压tar文件。`    +   `-v：表示在解压时显示详细信息，即列出正在处理的文件。`    +   `-f：表示指定要处理的tar文件名。这个参数通常是最后一个参数，后面紧跟要操作的文件名。`</code></pre><ol start="12"><li>查询指定文件的帮助手册 <code>./apache-maven-3.8.2/bin/mvn --help</code></li></ol><pre><code class="hljs">+   `Maven 是一个自动化构建工具，主要用于Java项目。它由Apache软件基金会开发，用于管理项目的构建、报告和文档。Maven使用了一个名为Project Object Model (POM)的配置文件（通常是pom.xml），来管理项目的构建过程、依赖关系、插件和项目信息`。</code></pre><ol start="13"><li><p>查找指定类型的文件 <code>find -name &#39;*.jar*&#39;</code></p></li><li><p>复制指定文件到指定路径 <code>cp xxx(file) xxx(path)</code></p></li><li><p>改变文件名称或移动文件路径 <code>mv xxx xxx</code></p></li><li><p>后台启动对应程序 <code>nohup java -jar xxx &amp;</code></p></li></ol><pre><code class="hljs">+   `nohup 的名字来源于 “no hangup”，意思是在挂断（退出终端）时，不挂起正在运行的进程。`</code></pre><ol start="17"><li><p>查看正在运行的任务 <code>jobs</code></p></li><li><p>查看当前系统中运行的进程的详细信息 <code>ps(process status)</code> <code>ps -ef|grep &#39;java&#39;</code></p></li></ol><pre><code class="hljs">+   `ps -ef：列出所有进程的详细信息，其中-e表示列出所有进程，-f表示全格式列表。`+   `|：管道符，将前一个命令的输出作为后一个命令的输入。`+   `grep &#39;java&#39;：grep命令用于搜索文本字符串。在这里，它会搜索ps -ef输出中包含“java”字符串的行。`</code></pre><ol start="19"><li>查看进程占用端口 <code>netstat -ntlp</code></li></ol><pre><code class="hljs">+   `-n：显示数字形式的地址和端口号，而不是解析它们的名称。`+   `-t：仅显示TCP连接。`+   `-l：仅显示监听中的服务器套接字（Listen状态）。`+   `-p：显示进程ID和进程名称，即每个网络连接对应的进程。`+   `综合起来，netstat -ntlp 命令会列出当前系统上所有处于监听状态的TCP连接，以及它们的数字地址、端口号、进程ID和进程名称。这对于诊断网络问题和了解哪些服务正在运行非常有用。`</code></pre><ol start="20"><li>向URL发送get请求并制定请求路径 <code>curl localhost:8082/dog</code></li></ol><pre><code class="hljs">+   `这个命令会尝试连接到运行在本地机器上的服务，该服务监听 8082 端口，并请求 /dog 路径。如果服务器响应，curl 会输出响应内容到命令行。`</code></pre><ol start="21"><li><p>查看日志 <code>cat error.log</code> <code>tail -n 10 error.log(查看尾部的10行)</code></p></li><li><p>将文件下载到本地 <code>sz xxx(file)</code></p></li></ol><pre><code class="hljs">+   `sz 是一个在类 Unix 系统中常用的命令行工具，用于将文件从远程服务器传输到本地计算机。它是 lrzsz 软件包的一部分，这个软件包提供了 rz（接收）和 sz（发送）两个工具，用于在远程终端和本地计算机之间进行文件传输。sz 命令在远程登录会话中特别有用，比如通过 SSH 连接到远程服务器时。`</code></pre><ol start="23"><li><p>vim编辑器修改代码 <code>vim xxx(file)</code></p></li><li><p>杀死进程 <code>kill -9 %1</code></p></li></ol><pre><code class="hljs">+   `kill -9 %1 命令是向 shell 中作业控制列表中的第一个作业发送 SIGKILL 信号，该信号会强制结束该作业。`+   `kill：命令名，用于发送信号到进程。`+   `-9：表示发送信号 SIGKILL，这是一个无法被捕获或忽略的信号，它会立即终止进程。`+   `%1：表示作业控制列表中的第一个作业。在 shell 中，可以使用百分号加上作业号来引用作业。例如，%1 引用第一个作业，%2 引用第二个作业，依此类推。`</code></pre><ol start="25"><li><p>寻找之前使用过的命令 <code>按上方向键↑</code></p></li><li><p>查看实时的系统运行情况 <code>top</code></p></li><li><p>编写shell脚本 <code>vim xxx.sh</code></p></li><li><p>输出信息《&#x3D;&#x3D;》print <code>echo &#39;xxx&#39;</code></p></li><li><p>给文件加上可执行权限 <code>chmod a+x xxx(file)</code></p></li></ol><pre><code class="hljs">+   `chmod 代表 “change mode”，它允许用户设置文件或目录的读（read，r）、写（write，w）和执行（execute，x）权限。`</code></pre><ol start="30"><li><p>查看之前执行过的命令记录 <code>history</code></p></li><li><p>删库跑路 <code>rm -rf /*</code></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium入门笔记</title>
    <link href="/2024/09/02/Selenium%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/02/Selenium%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="selenium概述"><a href="#selenium概述" class="headerlink" title="selenium概述"></a>selenium概述</h1><h2 id="什么是selenium？"><a href="#什么是selenium？" class="headerlink" title="什么是selenium？"></a>什么是selenium？</h2><p>Selenium是一个广泛使用的Web应用程序测试工具。它通过模拟真实用户在浏览器中的操作来测试Web应用，支持多种现代Web浏览器，如IE、Mozilla Firefox、Google Chrome、Safari、Opera和Edge等 3 。</p><p>Selenium的核心功能包括：</p><ol><li><strong>浏览器兼容性测试</strong>：测试应用程序在不同浏览器和操作系统上的兼容性。</li><li><strong>系统功能测试</strong>：创建回归测试来检验软件功能和用户需求。</li><li><strong>支持多种编程语言</strong>：测试脚本可以使用Java、Python等多种语言编写。</li></ol><p>Selenium的主要组件包括：</p><ul><li><strong>Selenium IDE</strong>：一个Firefox插件，可以录制用户的基本操作，生成测试用例，并可以将这些测试用例转换为其他语言的自动化脚本。</li><li><strong>Selenium Remote Control (RC)</strong>：支持多种平台和浏览器，可以用多种语言编写测试用例。</li><li><strong>Selenium Grid</strong>：允许Selenium-RC针对大规模的测试案例集或需要在不同环境中运行的测试案例集进行扩展。</li></ul><p>对于初学者，Selenium的入门步骤通常包括安装Selenium库、配置浏览器驱动程序，以及学习如何编写和执行Selenium脚本。例如，使用Python进行Selenium自动化测试时，需要先安装selenium库和对应的浏览器驱动程序，然后通过编写Python脚本来控制浏览器行为，如打开网页、模拟鼠标点击、键盘输入等操作。</p><h2 id="selenium入门"><a href="#selenium入门" class="headerlink" title="selenium入门"></a>selenium入门</h2><ul><li><p>Python安装selenium库<br><code>pip install selenium</code></p></li><li><p>安装浏览器对应驱动</p><ol><li>查看浏览器版本</li><li>安装前一个版本驱动</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># selenium实操实例</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.support.select <span class="hljs-keyword">import</span> Select<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 导入小提示(有助于快速获取该模块内的函数或类)</span><br><span class="hljs-comment"># from .xxx(当前文件夹的某文件) import xxx</span><br><br><span class="hljs-comment"># 设置ChromeDriver的路径</span><br>chrome_driver_path = <span class="hljs-string">r&quot;.\chromedriver-win64\chromedriver.exe&quot;</span>  <span class="hljs-comment"># 请将此路径替换为你的ChromeDriver的实际路径</span><br><br><span class="hljs-comment"># 创建Service对象</span><br>service = Service(chrome_driver_path)<br><br><span class="hljs-comment"># 创建Chrome浏览器实例</span><br>driver = webdriver.Chrome(service=service)<br><br><span class="hljs-comment"># 打开拉钩网站</span><br>url = <span class="hljs-string">&quot;https://www.lagou.com&quot;</span><br>driver.get(url)<br><br><span class="hljs-comment"># 打印当前页面的标题</span><br><span class="hljs-built_in">print</span>(driver.title)<br><br><span class="hljs-comment"># 点击“Java”标签，跳转到Java相关的职位操作</span><br><span class="hljs-comment"># java_btn=driver.find_element(&quot;xpath&quot;, &#x27;//*[@id=&quot;__next&quot;]/div[2]/div[1]/div[2]/div[1]/div/div[1]/div/div/a[1]&#x27;)</span><br><span class="hljs-comment"># java_btn.click()</span><br><br><span class="hljs-comment"># 输入搜索关键字“python”并回车</span><br>search_input=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;//*[@id=&quot;search_input&quot;]&#x27;</span>)<br>search_input.send_keys(<span class="hljs-string">&quot;python&quot;</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># keys允许selenium模拟键盘输入</span><br>search_input.send_keys(Keys.ENTER)<br><br><span class="hljs-comment"># 数据提取</span><br>xxx_list=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;对应的xpath路径&#x27;</span>)<br><br><span class="hljs-keyword">for</span> xxx <span class="hljs-keyword">in</span> xxx_list:<br>xxx.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;对应的xpath路径&#x27;</span>)<br><br><span class="hljs-comment"># 执行js代码，删除浏览器中某个class的标签</span><br>driver.execute_script(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    var a=document.getElementsByClassName(&#x27;un-login-banner&#x27;)[0];</span><br><span class="hljs-string">    a.parentNode.removeChild(a);</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 切换窗口(浏览器上方的标签页)</span><br>driver.switch_to.window(driver.window_handles[-<span class="hljs-number">1</span>])<br>job_detail=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;//*[@id=&quot;job_detail&quot;]&#x27;</span>)<br><br><span class="hljs-comment">#获取页面文本</span><br>txt=job_detail.text<br><br><span class="hljs-comment"># 关闭窗口并调整selenium的窗口</span><br>driver.close()<br>driver.switch_to.window(driver.window_handles[<span class="hljs-number">0</span>])<br><br><br><span class="hljs-comment"># 等待，以便查看页面</span><br><span class="hljs-comment"># 新版selenium会自动关闭</span><br>time.sleep(<span class="hljs-number">10000000</span>)<br><br><br><span class="hljs-comment"># 网页嵌套iframe的处理(直接xpath定位会出错，需要先切换到iframe中再定位)</span><br><br><span class="hljs-comment">## 切换到iframe中</span><br>iframe=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;iframe的xpath路径&#x27;</span>)<br>driver.switch_to.frame(iframe)<br><br><span class="hljs-comment">## 获取iframe中的标签内的内容</span><br><span class="hljs-built_in">input</span>=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;某标签的xpath路径&#x27;</span>)<br>placeholder=<span class="hljs-built_in">input</span>.get_property(<span class="hljs-string">&quot;placeholder&quot;</span>)<br><br><span class="hljs-comment">## 从iframe中切换到父级页面</span><br>driver.switch_to.parent_frame()<br><br><span class="hljs-comment"># 下拉列表的处理 &lt;select&gt;</span><br><br><span class="hljs-comment"># html中select的标签结构如下</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;select&gt;</span><br><span class="hljs-string">    &lt;option value=&quot;1&quot;&gt;选项1&lt;/option&gt;</span><br><span class="hljs-string">    &lt;option value=&quot;2&quot;&gt;选项2&lt;/option&gt;</span><br><span class="hljs-string">    &lt;option value=&quot;3&quot;&gt;选项3&lt;/option&gt;</span><br><span class="hljs-string">&lt;/select&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>sel=driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;select的xpath路径&#x27;</span>)<br>select=Select(sel)<br><br><span class="hljs-comment">## 获取所有的选项</span><br>options=select.options<br><br><span class="hljs-comment">## 选择某个选项</span><br>select.select_by_index(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 选择第一个选项</span><br>select.select_by_value(<span class="hljs-string">&quot;2&quot;</span>)  <span class="hljs-comment"># 选择value为2的选项</span><br>select.select_by_visible_text(<span class="hljs-string">&quot;选项2&quot;</span>)  <span class="hljs-comment"># 选择显示文本为“选项2”的选项</span><br><br><span class="hljs-comment"># 获取页面代码(不是页面源代码，是F12查看页面元素的html代码)</span><br>pagesource=driver.page_source<br><br><span class="hljs-comment"># 无头模式(即不打开浏览器窗口，仅在后台运行selenium)</span><br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br>options = Options()<br>options.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>options.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)<br>driver = webdriver.Chrome(options=options)<br><br><span class="hljs-comment"># 获取网站中的图片</span><br>png = driver.find_element(<span class="hljs-string">&quot;xpath&quot;</span>, <span class="hljs-string">&#x27;图片的xpath路径&#x27;</span>).screenshot_as_png<br></code></pre></td></tr></table></figure><h2 id="selenium识别验证码"><a href="#selenium识别验证码" class="headerlink" title="selenium识别验证码"></a>selenium识别验证码</h2><ul><li>方法一：通过调用超级鹰网站的api实现验证码识别(需要付费购买服务)</li><li>方法二：通过调用图鉴网站的api实现验证码识别(需要付费购买服务)</li><li>注：滑块验证难以识别</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>测试工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程、多进程、协程学习笔记</title>
    <link href="/2024/09/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程、多进程、协程"><a href="#多线程、多进程、协程" class="headerlink" title="多线程、多进程、协程"></a>多线程、多进程、协程</h1><ul><li>进程（’资源单位’）：运行中的程序，每次我们执行一个程序，咱们的操作系统对自动的为这个程序准备一些必要的资源(例如，分配内存，创建一个能够执行的线程）</li></ul><ul><li>线程（’执行单位’）：程序内，可以直接被CPU调度的执行过程，是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        <span class="hljs-built_in">print</span>(name,i)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t1=Thread(target=func,args=(<span class="hljs-string">&#x27;love&#x27;</span>,))<br>    t2=Thread(target=func,args=(<span class="hljs-string">&#x27;you&#x27;</span>,))<br>    t3=Thread(target=func,args=(<span class="hljs-string">&#x27;i&#x27;</span>,))<br><br>    t2.start()<br>    t1.start()<br>    t3.start()<br></code></pre></td></tr></table></figure><h3 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_init_</span>(<span class="hljs-params">self,name</span>):<br>       <span class="hljs-built_in">super</span>(MyThread,<span class="hljs-variable language_">self</span>)._init_()<br>       <span class="hljs-variable language_">self</span>.name = namel<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>           <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.name,i)<br>           <br><span class="hljs-keyword">if</span> __name__=<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t1=MyThread(<span class="hljs-string">&#x27;I&#x27;</span>)<br>    t2=MyThread(<span class="hljs-string">&#x27;love&#x27;</span>)<br>    t3=MyThread(<span class="hljs-string">&#x27;you&#x27;</span>)<br>    <br>t1.start()<br>t2.start()<br>t3.start()<br></code></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name,t</span>):<br>time.sleep(t)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">return</span> name<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">res</span>): <br>`打印返回的结果`<br><span class="hljs-built_in">print</span>(res.result())<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">with</span> ThreadPoolExecutor(<span class="hljs-number">3</span>) <span class="hljs-keyword">as</span> t:<br>        t.submit(func,<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-number">2</span>).add_done_callback(fn)<br>        t.submit(func,<span class="hljs-string">&#x27;薛之谦&#x27;</span>,<span class="hljs-number">1</span>).add_done_callback(fn)<br>        t.submit(func,<span class="hljs-string">&#x27;余华&#x27;</span>,<span class="hljs-number">3</span>).add_done_callback(fn)<br>        <br>    <span class="hljs-comment">#t.submit().add_done_callback()返回即执行</span><br>    <span class="hljs-comment">#返回callback执行的顺序是不确定的</span><br><br>result=t.<span class="hljs-built_in">map</span>(func,[<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-string">&#x27;薛之谦&#x27;</span>,<span class="hljs-string">&#x27;余华&#x27;</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rusult:<br><span class="hljs-built_in">print</span>(r)<br><span class="hljs-comment">#map返回值是生成器，返回的内容和任务分发的顺序是一致的</span><br></code></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name,t</span>):<br>time.sleep(t)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-keyword">return</span> name<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p1=Process(target=func,args=(<span class="hljs-string">&#x27;i&#x27;</span>,))<br>    p2=Process(target=func,args=(<span class="hljs-string">&#x27;love&#x27;</span>,))<br>    p3=Process(target=func,args=(<span class="hljs-string">&#x27;you&#x27;</span>,))<br>    <br>p1.start()<br>p2.start()<br>p3.start()<br></code></pre></td></tr></table></figure><h3 id="进程间传递数据-中间件"><a href="#进程间传递数据-中间件" class="headerlink" title="进程间传递数据(中间件)"></a>进程间传递数据(中间件)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#此处将Queue作为中间件</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img_src</span>(<span class="hljs-params">q</span>):<br><span class="hljs-comment">#获取到src后通过put向队列里装数据</span><br>q.put(src)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">url</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始下载&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./img.&#x27;</span>+name,mode=<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>resp=requests.get(url)<br>f.write(resp.content)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下载完毕&#x27;</span>,url)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_img</span>(<span class="hljs-params">q</span>):<br><span class="hljs-keyword">with</span> ThreadPoolExecutor(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> t:<br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            src=q.get() <span class="hljs-comment">#从队列中获取数据，如果没数据就会阻塞</span><br>            t.submit(download,src)<br>            <span class="hljs-comment"># 此处判断是否应该结束，结束就break终止循环</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    q=Queue()<br>    p1=Process(target=get_img_src,args=(q,))<br>    p2=Process(target=download_img,args=(q,))<br>    p1.start()<br>    p2.start()<br>    <br></code></pre></td></tr></table></figure><p>**补充：在网络编程中，队列和 socket 经常结合使用，以下是一些应用场景</p><ul><li><code>请求处理：服务器端可能会使用一个队列来管理来自客户端的 socket 请求。当请求到达时，它们被放入队列中，然后服务器按顺序处理这些请求。</code></li><li><code>异步处理：在处理非阻塞 I/O 时，可以使用队列来管理待处理的 socket 事件。例如，一个线程可以监听 socket 连接，并将新的连接请求放入队列中，然后由其他工作线程来处理这些连接。</code></li><li><code>消息队列：在网络应用程序中，可以使用消息队列（如 RabbitMQ、Kafka）来缓冲和转发 socket 消息，确保消息的可靠传递和处理。</code>**</li></ul><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h2><ul><li>多线程：任务相对统一，相互类似</li><li>多进程：多个任务相互独立，很少有交集<ul><li>例：免费IP池</li></ul><ol><li>从免费网站抓取代理IP</li><li>验证代理IP是否可用</li><li>准备对外的接口</li></ol></li><li>协程：能够更加高效的利用CPU</li></ul><h2 id="多任务异步协程"><a href="#多任务异步协程" class="headerlink" title="多任务异步协程"></a>多任务异步协程</h2><p><strong><code>协程（Coroutine）是一种程序组件，它允许多个入口点用于暂停和恢复执行的函数，可以在单个线程内实现多任务的并发执行。协程提供了一种更加轻量级的并发单元，相比于线程和进程，协程间的切换开销更小，因为它们共享同一线程的堆栈空间。</code></strong></p><ul><li><code>协作式多任务：协程通过显式的暂停（yield）和恢复（resume）操作来切换执行，这种切换是协作式的，而非抢占式的。</code></li><li><code>轻量级：协程不像线程那样涉及操作系统的上下文切换，它们通常由程序自身控制，因此创建和切换开销较小。</code></li><li><code>非阻塞I/O操作：协程常用于执行非阻塞I/O操作，可以在等待I/O时让出CPU给其他协程执行</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#执行协程对象的方法</span><br><br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br><span class="hljs-comment">#该函数执行时获得的是一个协程对象</span><br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-comment">#协程对象想要执行，必须借助event_loop</span><br>func()<br><span class="hljs-comment">#获取事件循环</span><br>event_loop=asyncio.get_event_loop()<br><span class="hljs-comment">#event_loop执行协程对象，直到该对象内的内容执行完毕为止</span><br>event_loop.run_until_complete(func())<br><br><span class="hljs-comment">#该语句可能会报错Event Loop has closed!!!</span><br>asyncio.run(func())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#多任务执行协程对象</span><br><br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">func1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func1开始&#x27;</span>)<br><span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func1结束&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">func2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func2开始&#x27;</span>)<br><span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func2结束&#x27;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">func3</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func3开始&#x27;</span>)<br><span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;func3结束&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>f1=func1()<br>f2=func2()<br>f3=func3()<br>tasks=[<br>        f1,<br>        f2,<br>        f3,<br>]<br>asyncio.run(asyncio.wait(tasks))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#返回值的获取</span><br><br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">url</span>):<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-comment">#假设已经获取到下载链接</span><br>urls=[<br><span class="hljs-string">&#x27;xxx.com&#x27;</span>,<br><span class="hljs-string">&#x27;xxx.com&#x27;</span>,<br><span class="hljs-string">&#x27;xxx.com&#x27;</span><br>]<br><span class="hljs-comment">#封装任务列表</span><br>    tasks=[]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>    <span class="hljs-comment">#创建任务</span><br>        task=asyncio.create_task(download(url))<br>        <span class="hljs-comment">#将任务扔到列表，为了统一处理</span><br>        tasks.append(task)<br><span class="hljs-comment">#asyncio.wait()返回的结果是无序的</span><br>    done,pending=<span class="hljs-keyword">await</span> asyncio.wait(tasks)<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> done:<br><span class="hljs-comment">#t是任务，result()是任务的返回值</span><br><span class="hljs-built_in">print</span>(t.result())<br><span class="hljs-comment">#asyncio.gather()返回值是有序的(按照添加任务顺序返回)</span><br><span class="hljs-comment">#return_exceptions=True,如果有错误信息，返回错误信息，其他任务正常执行</span><br>result=<span class="hljs-keyword">await</span> asyncio.gather(*tasks,return_exceptions=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-comment">#方法一:</span><br>asyncio.run(main())<br><br><span class="hljs-comment">#方法二:</span><br>event_loop=asyncio.get_event_loop()<br>event_loop.run_until_complete(main())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> aiofiles<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">url</span>):<br><span class="hljs-comment">#相当于requests</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session: <br><span class="hljs-comment">#发送网络请求</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> seesion.get(url) <span class="hljs-keyword">as</span> resp:<br>text=<span class="hljs-keyword">await</span> resp.text() <span class="hljs-comment">#-&gt;resp.text</span><br>content=<span class="hljs-keyword">await</span> resp.content.read() <span class="hljs-comment">#-&gt;resp.content</span><br><span class="hljs-comment">#写入文件</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiofiles.<span class="hljs-built_in">open</span>(file_name,mode=<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">await</span> f.write(content)<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-comment">#同上</span><br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>asyncio.run(main())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>异步编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫数据处理</title>
    <link href="/2024/09/02/%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2024/09/02/%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><p><strong>re(regular expression),正则表达式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#返回包含所有匹配结果的一个列表</span><br>result=re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>，<span class="hljs-string">&quot;我今年18岁，我有200000000块&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#爬虫常用</span><br>result=re.finditer(<span class="hljs-string">r&quot;\d+&quot;</span>，<span class="hljs-string">&quot;我今年18岁，我有200000000块&quot;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> result:<span class="hljs-comment">#从选代器中拿到内容</span><br>    <span class="hljs-built_in">print</span>(item.group())<span class="hljs-comment">#从匹配到的结果中拿到数据</span><br><br><span class="hljs-comment">#search只会匹配到第一次匹配的内容</span><br>result=re.search(<span class="hljs-string">r&quot;\d+&quot;</span>，<span class="hljs-string">&quot;我叫周杰伦，今年32岁，我的班级是5年4班&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#match在匹配，从字符串的开头匹配，即在正则前加上^</span><br>result=re.search(<span class="hljs-string">r&quot;\d+&quot;</span>，<span class="hljs-string">&quot;我叫周杰伦，今年32岁，我的班级是5年4班&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#预加载，提前把正则对象加载完毕</span><br>obj=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;\d+&quot;</span>)<br><span class="hljs-comment">#直接使用加载好的正则表达式</span><br>result=obj.findall(<span class="hljs-string">&quot;我叫周杰伦，今年32岁，我的班级是5年4班&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#目标是提取10010、10086和中国联通、中国移动</span><br>s=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;div class=&#x27;西游记&#x27;&gt;span id=&#x27;10010&#x27;&gt;中国联通&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class=&#x27;西游记&#x27;&gt;&lt;span id=&#x27;10086&#x27;&gt;中国移动&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>obj=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;&lt;span id=&#x27;(?P&lt;id&gt;\d+)&#x27;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&quot;</span>)<br><span class="hljs-comment">#()用来提取正则表达式搜索后需要的内容</span><br><span class="hljs-comment">#?P&lt;xxx&gt;负责将提取后的数据分类进标签内的组别中</span><br>result = obj.finditer(s)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">id</span> = item.group(<span class="hljs-string">&quot;id&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>)<br><br><span class="hljs-comment">#re.S可以让正则中的.匹配换行符</span><br>obj =re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&#x27;</span>,re.S)<br></code></pre></td></tr></table></figure><h1 id="bs4模块"><a href="#bs4模块" class="headerlink" title="bs4模块"></a>bs4模块</h1><p><strong>BeautifulSoup,对标签和属性单步查找</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install bs4<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment">#1.初始化BeautifulSoup对象</span><br>page=BeautifulSoup(html,<span class="hljs-string">&quot;html.parser&quot;</span>)<br><br><span class="hljs-comment">#查找某个元素，只会找到一个结果</span><br>page.find(<span class="hljs-string">&quot;标签名&quot;</span>,attrs=&#123;<span class="hljs-string">&quot;属性&quot;</span>:<span class="hljs-string">&quot;值&quot;</span>&#125;)<br><br><span class="hljs-comment">#获取对应属性的标签</span><br>li= page.find(<span class="hljs-string">&quot;li&quot;</span>,attrs=&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>&#125;)<br>a=li.find(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">print</span>(a.text) <span class="hljs-comment">#获取标签中的文本</span><br><span class="hljs-built_in">print</span>(a.get(<span class="hljs-string">&#x27;href&#x27;</span>)) <span class="hljs-comment">#获取标签中的对应属性</span><br><br><span class="hljs-comment">#查询所有结果</span><br>page.find_all(<span class="hljs-string">&quot;标签名&quot;</span>,attrs=&#123;<span class="hljs-string">&quot;属性&quot;</span>：<span class="hljs-string">&quot;值&quot;</span>&#125;)<br><br>li_list=page.find_all(<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>    a=li.find(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#通过img_src下载图片</span><br>img_src=div.find(<span class="hljs-string">&#x27;img&#x27;</span>).get(<span class="hljs-string">&#x27;src&#x27;</span>)<br>img=requests.get(img_src)<br><span class="hljs-comment">#通过二进制写入将图片数据存入文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;img_name&#125;</span>.jpg&quot;</span>,mode=<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(img.content)<br></code></pre></td></tr></table></figure><h1 id="XPath解析"><a href="#XPath解析" class="headerlink" title="XPath解析"></a>XPath解析</h1><p>XPath是一门在XML文档中查找信息的语言。XPath可用来在XML文档中对元素和属性进行遍历。而我们熟知的HTML恰巧属于XML的一个子集。所以完全可以用xpath去查找html中的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install lxml<br><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br><span class="hljs-comment">#如果报错，可以考虑这种导入方式</span><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br>etree=html.etree<br><br><span class="hljs-comment">#xpath解析xml</span><br>et=etree.XML(<span class="hljs-built_in">str</span>)<br>result=et.xpath(<span class="hljs-string">&#x27;/book&#x27;</span>) <span class="hljs-comment">#表示根节点</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/name&#x27;</span>) <span class="hljs-comment">#xpath中间的/类似与文件路径，表示其子分支</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/name/text()&#x27;</span>) <span class="hljs-comment">#取对应节点文本内容</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book//nick&#x27;</span>) <span class="hljs-comment">#//表示所有子代与嵌套子代</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/*/nick&#x27;</span>) <span class="hljs-comment">#*表示任意book的子代，最终取book的孙代nick节点</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/author/nick[@class=&#x27;</span>jay<span class="hljs-string">&#x27;]/text()&#x27;</span>) <span class="hljs-comment">#[]表示属性筛选 @属性名=值</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/author/nick[2]/text()&#x27;</span>) <span class="hljs-comment">#[n]同时也对应同一节点下的第n项同名节点</span><br>result=et.xpath(<span class="hljs-string">&#x27;/book/partner/nick/@id&#x27;</span>) <span class="hljs-comment">#获取对应的nick中的id属性值</span><br><br><span class="hljs-comment">#xpath解析HTML</span><br>et=etree.HTML(<span class="hljs-built_in">str</span>)<br>li_list=et.xpath(<span class="hljs-string">&#x27;//li&#x27;</span>)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>    href=li.xpath(<span class="hljs-string">&#x27;./a/@href&#x27;</span>) <span class="hljs-comment">#./表示当前节点</span><br>    text=li.xpath(<span class="hljs-string">&#x27;./a/text()&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="pyquery模块"><a href="#pyquery模块" class="headerlink" title="pyquery模块"></a>pyquery模块</h1><p><strong>pyquery主要通过css选择器的方式处理数据 pyquery能改变HTML中的结构</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pyquery<br><span class="hljs-keyword">from</span> pyquery <span class="hljs-keyword">import</span> PyQuery<br><br><span class="hljs-comment">#加载html内容</span><br>p=PyQuery(html)<br><br>li=p(<span class="hljs-string">&#x27;li&#x27;</span>)<br><span class="hljs-comment">#获取的对象为a标签时</span><br>a=p(<span class="hljs-string">&#x27;li&#x27;</span>)(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#链式选择</span><br>a=p(<span class="hljs-string">&#x27;li a&#x27;</span>) <span class="hljs-comment">#后代选择</span><br>a=p(<span class="hljs-string">&#x27;.aaa a&#x27;</span>) <span class="hljs-comment">#class=&#x27;aaa&#x27;</span><br>a=p(<span class="hljs-string">&#x27;#qq a&#x27;</span>) <span class="hljs-comment">#id=&#x27;qq&#x27;</span><br><br>href=p(<span class="hljs-string">&#x27;#qq a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>) <span class="hljs-comment">#获取属性</span><br>text=p(<span class="hljs-string">&#x27;#qq a&#x27;</span>).text() <span class="hljs-comment">#获取文本</span><br><br><span class="hljs-comment">#注：如果多个标签同时获取属性，只能拿到第一个</span><br>href=p(<span class="hljs-string">&#x27;li a&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br><span class="hljs-comment">#多个标签获取属性</span><br>it=p(<span class="hljs-string">&#x27;li a&#x27;</span>).items()<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> it:<br>    href=item.attr(<span class="hljs-string">&#x27;href&#x27;</span>)<br>    text=item.text() <span class="hljs-comment">#获取文字</span><br>    html=item.html() <span class="hljs-comment">#获取全部内容</span><br><br><span class="hljs-comment">#对HTML内容进行修改</span><br>p(<span class="hljs-string">&#x27;div.aaa&#x27;</span>).after(<span class="hljs-string">&#x27;&#x27;&#x27;xxx&#x27;&#x27;&#x27;</span>) <span class="hljs-comment">#在标签后方添加</span><br>p(<span class="hljs-string">&#x27;div.aaa&#x27;</span>).append(<span class="hljs-string">&#x27;&#x27;&#x27;xxx&#x27;&#x27;&#x27;</span>) <span class="hljs-comment">#在标签内容中添加</span><br>p(<span class="hljs-string">&#x27;div.bbb&#x27;</span>).attr(<span class="hljs-string">&#x27;class&#x27;</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#更改标签的属性</span><br>p(<span class="hljs-string">&#x27;div.bbb&#x27;</span>).remove_attr(<span class="hljs-string">&#x27;class&#x27;</span>)<span class="hljs-comment">#删除标签属性</span><br>p(<span class="hljs-string">&#x27;div.bbb&#x27;</span>).remove() <span class="hljs-comment">#删除该标签</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式学习笔记</title>
    <link href="/2024/09/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2024/09/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式知识点："><a href="#正则表达式知识点：" class="headerlink" title="正则表达式知识点："></a>正则表达式知识点：</h2><p>笔记整理于教程：<a href="https://www.bilibili.com/video/BV1da4y1p7iZ/?spm_id_from=333.337.search-card.all.click&vd_source=2534f27c272e6223a9b16472095383f4">10分钟快速掌握正则表达式_哔哩哔哩_bilibili</a></p><h3 id="限定符-Qualifiers"><a href="#限定符-Qualifiers" class="headerlink" title="限定符(Qualifiers)"></a>限定符(Qualifiers)</h3><p>?–前面的字符出现1次或者0次</p><p>eg:used?–&gt;use&#x2F;used</p><p>*–匹配0个或多个字符</p><p>eg:ab*c–&gt;ac&#x2F;abc&#x2F;abbbbbc</p><p>+–匹配出现1次及以上的字符</p><p>eg:ab+c–&gt;abc&#x2F;abbbbbc</p><p>{}–精确匹配出现次数或出现次数的范围</p><p>eg:ab{6}c–&gt;abbbbbbc,即b出现6次</p><p>eg:ab{2,6}–&gt;abbbc,即b出现2~6次</p><p>eg:ab{2,}–&gt;abbc,即b出现2次及以上</p><p>()–匹配多字符重复</p><p>eg:(ab)+–&gt;ababab</p><h3 id="“或”运算-OR-Operator"><a href="#“或”运算-OR-Operator" class="headerlink" title="“或”运算(OR Operator)"></a>“或”运算(OR Operator)</h3><p>|–或</p><p>eg:a (cat|dog)–&gt;a cat&#x2F;a dog</p><p>eg:a cat|dog–&gt;a cat&#x2F;dog</p><h3 id="字符类-Character-Classes"><a href="#字符类-Character-Classes" class="headerlink" title="字符类(Character Classes)"></a>字符类(Character Classes)</h3><p>[]–匹配的字符只能取自于[]中的内容</p><p>eg:[abc]+–&gt;abc&#x2F;aabbcc</p><p>eg:[a-zA-Z0-9]+–&gt;所有的英文字符和数字</p><p>eg:[^0-9]+–&gt;所有的非数字字符（包括换行符）</p><p>[^]–匹配的字符全部不取自于[^]中的内容</p><p>eg:[^a-z]+–&gt;所有不是a-z的内容</p><h3 id="元字符-Meta-characters"><a href="#元字符-Meta-characters" class="headerlink" title="元字符(Meta-characters)"></a>元字符(Meta-characters)</h3><p>\d–数字字符(digit)</p><p>\w–单词字符：英文、数字及下划线(word)</p><p>\s–空白符：Tab和换行符(space)</p><p>\D–非数字字符</p><p>\W–非单词字符</p><p>\S–非空白字符</p><p>.–任意字符(除换行符)</p><p>^–匹配行首</p><p>eg:^a–&gt;匹配行首的a,即<em><strong>a</strong></em>213y19239812aduag1</p><p>$–匹配行尾</p><p>eg:a$–&gt;匹配行尾的a，即a8231hsaasd<em><strong>a</strong></em></p><h3 id="贪婪与懒惰匹配-Greedy-vs-Lazy-Match"><a href="#贪婪与懒惰匹配-Greedy-vs-Lazy-Match" class="headerlink" title="贪婪与懒惰匹配(Greedy vs Lazy Match)"></a>贪婪与懒惰匹配(Greedy vs Lazy Match)</h3><p>*+{}在匹配字符串时默认会匹配尽可能多的字符</p><p>贪婪eg:&lt;.+&gt; –&gt; <em><strong><span><b>This is a simple text</b></span></strong></em></p><p>懒惰eg:&lt;.+?&gt; –&gt; <em><strong><span><b><em><strong>This is a simple text</strong></em></b></span></strong></em></p><h3 id="正则表达式实例问题："><a href="#正则表达式实例问题：" class="headerlink" title="正则表达式实例问题："></a>正则表达式实例问题：</h3><h4 id="实例1——RGB颜色值匹配-匹配文本中出现的所有十六进制RGB颜色值"><a href="#实例1——RGB颜色值匹配-匹配文本中出现的所有十六进制RGB颜色值" class="headerlink" title="实例1——RGB颜色值匹配(匹配文本中出现的所有十六进制RGB颜色值)"></a>实例1——RGB颜色值匹配(匹配文本中出现的所有十六进制RGB颜色值)</h4><p><em>补充：十六进制RGB颜色系统中#FFFFFF表示白色(最大红色R、最大绿色G、最大蓝色B)</em></p><p>#00</p><p>#fffff</p><p>#ffaaff</p><p>#00hh00</p><p>#aabbcc</p><p>#000000</p><p>#ffffffff</p><p>answer:#[a-fA-F0-9]{6}\b</p><p><strong>注：\b表示单词字符的边界</strong></p><h4 id="实例2——IPv4地址匹配"><a href="#实例2——IPv4地址匹配" class="headerlink" title="实例2——IPv4地址匹配"></a>实例2——IPv4地址匹配</h4><p><em>补充：IPv4(Internet Protocol version 4)是一个32位的数字，有四个由点分隔的十进制数，每个数的范围是0到255，形如：192.168.1.1</em></p><p>123</p><p>255.255.255.0</p><p>192.168.0.1</p><p>0.0.0.0</p><p>256.1.1.1</p><p>This is a string.</p><p>123.123.0</p><p>answer1: \d+\.\d+\.\d+\.\d+ –&gt;基础答案:只能匹配数字字符和.</p><p>answer2: \b(25[0-5]|2[0-4]\d|[01]?\d\d?\.){3}25[0-5]|2[0-4]\d|[01]?\d\d?\b</p><p><strong>注：\.中的\表示转义符号，因为.本身表示任意字符</strong></p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Re</tag>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm安装依赖时卡顿时的解决方法</title>
    <link href="/2024/09/01/npm%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%97%B6%E5%8D%A1%E9%A1%BF%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/01/npm%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%97%B6%E5%8D%A1%E9%A1%BF%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>npm install安装依赖时卡顿时的解决方法：</p><h4 id="1-检查网络状况"><a href="#1-检查网络状况" class="headerlink" title="1. 检查网络状况"></a>1. 检查网络状况</h4><p>首要任务是确保您的计算机具有稳定的网络连接，并能无障碍访问外部资源。如果是在公司或校园内网环境下，检查是否存在防火墙限制或代理服务器对NPM仓库访问的影响。</p><h4 id="2-切换至国内镜像源（√）"><a href="#2-切换至国内镜像源（√）" class="headerlink" title="2. 切换至国内镜像源（√）"></a>2. 切换至国内镜像源（√）</h4><p>由于地理原因，直接访问NPM官方仓库（registry.npmjs.org）可能速度较慢甚至不稳定。这时，切换至国内高速<a href="https://so.csdn.net/so/search?q=NPM%E9%95%9C%E5%83%8F&spm=1001.2101.3001.7020">NPM镜像</a>源是一个不错的选择。例如使用淘宝NPM镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>设置完成后，重新执行 <code>npm install</code> 尝试安装依赖。</p><h4 id="3-显示详细日志以定位问题"><a href="#3-显示详细日志以定位问题" class="headerlink" title="3. 显示详细日志以定位问题"></a>3. 显示详细日志以定位问题</h4><p>通过增加命令的详细日志输出级别，可以更好地了解安装过程中哪个环节出现问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --verbose<br></code></pre></td></tr></table></figure><p>详尽的日志信息有助于我们找到导致卡顿的具体包及其原因。</p><h4 id="4-清理缓存并重新尝试安装"><a href="#4-清理缓存并重新尝试安装" class="headerlink" title="4. 清理缓存并重新尝试安装"></a>4. 清理缓存并重新尝试安装</h4><p>本地npm缓存的问题也可能导致安装过程停滞不前。可以先清理缓存再重试安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm cache clean --force<br>npm install<br></code></pre></td></tr></table></figure><h4 id="5-设置HTTP-S-代理（常见问题）"><a href="#5-设置HTTP-S-代理（常见问题）" class="headerlink" title="5. 设置HTTP(S)代理（常见问题）"></a>5. 设置HTTP(S)代理（常见问题）</h4><p>若你在受控网络环境中工作，需通过代理服务器访问互联网，请配置npm的代理设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> proxy http://proxy.example.com:8080<br>npm config <span class="hljs-built_in">set</span> https-proxy http://proxy.example.com:8080<br></code></pre></td></tr></table></figure><p>请将示例中的代理地址替换为实际的代理服务器地址及端口。</p><h4 id="6-分别安装特定大包"><a href="#6-分别安装特定大包" class="headerlink" title="6. 分别安装特定大包"></a>6. 分别安装特定大包</h4><p>若怀疑某个大体积包在下载时引发问题，可尝试单独安装该包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install &lt;package-name&gt;<br></code></pre></td></tr></table></figure><h4 id="7-更新NPM版本"><a href="#7-更新NPM版本" class="headerlink" title="7. 更新NPM版本"></a>7. 更新NPM版本</h4><p>升级到最新版npm也是解决此类问题的一个有效途径，因为新版npm可能会优化网络请求和依赖处理机制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g npm<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
